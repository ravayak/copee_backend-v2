// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package mysql

import (
	"context"
	"database/sql"
	"time"
)

const createCategory = `-- name: CreateCategory :execresult
INSERT INTO equipments_categories (ec_category_code, ec_description)
VALUES (?, ?)
`

type CreateCategoryParams struct {
	EcCategoryCode sql.NullString `json:"ec_category_code"`
	EcDescription  sql.NullString `json:"ec_description"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (sql.Result, error) {
	return q.exec(ctx, q.createCategoryStmt, createCategory, arg.EcCategoryCode, arg.EcDescription)
}

const createClient = `-- name: CreateClient :execresult
INSERT INTO clients (client_last_name, client_first_name, client_email, client_phone, client_fiscal_year_income
) VALUES ( 
  ?, ?, ?, ?, ?
)
`

type CreateClientParams struct {
	ClientLastName         sql.NullString `json:"client_last_name"`
	ClientFirstName        sql.NullString `json:"client_first_name"`
	ClientEmail            sql.NullString `json:"client_email"`
	ClientPhone            sql.NullString `json:"client_phone"`
	ClientFiscalYearIncome sql.NullInt32  `json:"client_fiscal_year_income"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (sql.Result, error) {
	return q.exec(ctx, q.createClientStmt, createClient,
		arg.ClientLastName,
		arg.ClientFirstName,
		arg.ClientEmail,
		arg.ClientPhone,
		arg.ClientFiscalYearIncome,
	)
}

const createClientAss = `-- name: CreateClientAss :execresult
INSERT INTO clients_ass (ca_client_id, ca_company_id, ca_call_date, ca_call_reason, ca_intervention_date, ca_comment, ca_is_resolved) VALUES ( 
  ?, ?, ?, ?, ?, ?, ?
)
`

type CreateClientAssParams struct {
	CaClientID         sql.NullInt32  `json:"ca_client_id"`
	CaCompanyID        sql.NullInt32  `json:"ca_company_id"`
	CaCallDate         sql.NullTime   `json:"ca_call_date"`
	CaCallReason       sql.NullString `json:"ca_call_reason"`
	CaInterventionDate sql.NullTime   `json:"ca_intervention_date"`
	CaComment          sql.NullString `json:"ca_comment"`
	CaIsResolved       sql.NullBool   `json:"ca_is_resolved"`
}

func (q *Queries) CreateClientAss(ctx context.Context, arg CreateClientAssParams) (sql.Result, error) {
	return q.exec(ctx, q.createClientAssStmt, createClientAss,
		arg.CaClientID,
		arg.CaCompanyID,
		arg.CaCallDate,
		arg.CaCallReason,
		arg.CaInterventionDate,
		arg.CaComment,
		arg.CaIsResolved,
	)
}

const createClientHome = `-- name: CreateClientHome :execresult
INSERT INTO clients_homes (ch_client_id, ch_geo_id, ch_construction_year, ch_area, ch_residents, ch_roof_positionning, ch_roof_slope, ch_label, ch_tr, ch_huc, ch_isolation
) VALUES ( 
  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateClientHomeParams struct {
	ChClientID         sql.NullInt32   `json:"ch_client_id"`
	ChGeoID            sql.NullInt32   `json:"ch_geo_id"`
	ChConstructionYear sql.NullInt32   `json:"ch_construction_year"`
	ChArea             sql.NullInt32   `json:"ch_area"`
	ChResidents        sql.NullInt32   `json:"ch_residents"`
	ChRoofPositionning sql.NullString  `json:"ch_roof_positionning"`
	ChRoofSlope        sql.NullInt32   `json:"ch_roof_slope"`
	ChLabel            sql.NullString  `json:"ch_label"`
	ChTr               sql.NullInt32   `json:"ch_tr"`
	ChHuc              sql.NullFloat64 `json:"ch_huc"`
	ChIsolation        sql.NullString  `json:"ch_isolation"`
}

func (q *Queries) CreateClientHome(ctx context.Context, arg CreateClientHomeParams) (sql.Result, error) {
	return q.exec(ctx, q.createClientHomeStmt, createClientHome,
		arg.ChClientID,
		arg.ChGeoID,
		arg.ChConstructionYear,
		arg.ChArea,
		arg.ChResidents,
		arg.ChRoofPositionning,
		arg.ChRoofSlope,
		arg.ChLabel,
		arg.ChTr,
		arg.ChHuc,
		arg.ChIsolation,
	)
}

const createClientHomeBill = `-- name: CreateClientHomeBill :execresult
INSERT INTO clients_homes_bills (chb_home_id, chb_electricity, chb_natural_gas , chb_propane_gas , chb_wood , chb_heating_oil, chb_year 
) VALUES ( 
  ?, ? , ? , ? , ? , ?, ?
)
`

type CreateClientHomeBillParams struct {
	ChbHomeID      sql.NullInt32 `json:"chb_home_id"`
	ChbElectricity sql.NullInt32 `json:"chb_electricity"`
	ChbNaturalGas  sql.NullInt32 `json:"chb_natural_gas"`
	ChbPropaneGas  sql.NullInt32 `json:"chb_propane_gas"`
	ChbWood        sql.NullInt32 `json:"chb_wood"`
	ChbHeatingOil  sql.NullInt32 `json:"chb_heating_oil"`
	ChbYear        sql.NullInt32 `json:"chb_year"`
}

func (q *Queries) CreateClientHomeBill(ctx context.Context, arg CreateClientHomeBillParams) (sql.Result, error) {
	return q.exec(ctx, q.createClientHomeBillStmt, createClientHomeBill,
		arg.ChbHomeID,
		arg.ChbElectricity,
		arg.ChbNaturalGas,
		arg.ChbPropaneGas,
		arg.ChbWood,
		arg.ChbHeatingOil,
		arg.ChbYear,
	)
}

const createClientHomeEquipment = `-- name: CreateClientHomeEquipment :execresult
INSERT INTO clients_homes_equipments (che_home_id,  che_equipment_type, che_description
) VALUES ( 
   ?, ?, ?
)
`

type CreateClientHomeEquipmentParams struct {
	CheHomeID        sql.NullInt32  `json:"che_home_id"`
	CheEquipmentType sql.NullString `json:"che_equipment_type"`
	CheDescription   sql.NullString `json:"che_description"`
}

func (q *Queries) CreateClientHomeEquipment(ctx context.Context, arg CreateClientHomeEquipmentParams) (sql.Result, error) {
	return q.exec(ctx, q.createClientHomeEquipmentStmt, createClientHomeEquipment, arg.CheHomeID, arg.CheEquipmentType, arg.CheDescription)
}

const createClientInstallation = `-- name: CreateClientInstallation :execresult
INSERT INTO clients_installations (ci_client_id , ci_user_id , ci_shared_user_id , ci_creation_date , ci_update_date , ci_status, ci_comments) VALUES ( 
   ?, ?, ?, ?, ?, ?, ?
)
`

type CreateClientInstallationParams struct {
	CiClientID     sql.NullInt32  `json:"ci_client_id"`
	CiUserID       sql.NullInt32  `json:"ci_user_id"`
	CiSharedUserID sql.NullInt32  `json:"ci_shared_user_id"`
	CiCreationDate sql.NullTime   `json:"ci_creation_date"`
	CiUpdateDate   sql.NullTime   `json:"ci_update_date"`
	CiStatus       sql.NullString `json:"ci_status"`
	CiComments     sql.NullString `json:"ci_comments"`
}

func (q *Queries) CreateClientInstallation(ctx context.Context, arg CreateClientInstallationParams) (sql.Result, error) {
	return q.exec(ctx, q.createClientInstallationStmt, createClientInstallation,
		arg.CiClientID,
		arg.CiUserID,
		arg.CiSharedUserID,
		arg.CiCreationDate,
		arg.CiUpdateDate,
		arg.CiStatus,
		arg.CiComments,
	)
}

const createClientInstallationFile = `-- name: CreateClientInstallationFile :execresult
INSERT INTO clients_installations_files (cif_installation_id , cif_file_type , cif_file_url , cif_file_creation_date
) VALUES ( 
  ?, ?, ?, ?
)
`

type CreateClientInstallationFileParams struct {
	CifInstallationID   sql.NullInt32  `json:"cif_installation_id"`
	CifFileType         sql.NullString `json:"cif_file_type"`
	CifFileUrl          sql.NullString `json:"cif_file_url"`
	CifFileCreationDate sql.NullTime   `json:"cif_file_creation_date"`
}

func (q *Queries) CreateClientInstallationFile(ctx context.Context, arg CreateClientInstallationFileParams) (sql.Result, error) {
	return q.exec(ctx, q.createClientInstallationFileStmt, createClientInstallationFile,
		arg.CifInstallationID,
		arg.CifFileType,
		arg.CifFileUrl,
		arg.CifFileCreationDate,
	)
}

const createClientInstallationPayment = `-- name: CreateClientInstallationPayment :execresult
INSERT INTO clients_installations_payments (cip_amount , cip_type , cip_date , cip_installation_id , cip_description , cip_transaction_number , cip_vat_rate
) VALUES ( 
  ?, ?, ?, ?, ? , ? , ?
)
`

type CreateClientInstallationPaymentParams struct {
	CipAmount            sql.NullFloat64 `json:"cip_amount"`
	CipType              sql.NullString  `json:"cip_type"`
	CipDate              sql.NullTime    `json:"cip_date"`
	CipInstallationID    sql.NullInt32   `json:"cip_installation_id"`
	CipDescription       sql.NullString  `json:"cip_description"`
	CipTransactionNumber sql.NullString  `json:"cip_transaction_number"`
	CipVatRate           sql.NullFloat64 `json:"cip_vat_rate"`
}

func (q *Queries) CreateClientInstallationPayment(ctx context.Context, arg CreateClientInstallationPaymentParams) (sql.Result, error) {
	return q.exec(ctx, q.createClientInstallationPaymentStmt, createClientInstallationPayment,
		arg.CipAmount,
		arg.CipType,
		arg.CipDate,
		arg.CipInstallationID,
		arg.CipDescription,
		arg.CipTransactionNumber,
		arg.CipVatRate,
	)
}

const createClientInstallationProduct = `-- name: CreateClientInstallationProduct :execresult
INSERT INTO clients_installations_products (cip_installation_id, cip_product_id, cip_discount) VALUES ( 
   ?, ?, ?
)
`

type CreateClientInstallationProductParams struct {
	CipInstallationID sql.NullInt32  `json:"cip_installation_id"`
	CipProductID      sql.NullInt32  `json:"cip_product_id"`
	CipDiscount       sql.NullString `json:"cip_discount"`
}

func (q *Queries) CreateClientInstallationProduct(ctx context.Context, arg CreateClientInstallationProductParams) (sql.Result, error) {
	return q.exec(ctx, q.createClientInstallationProductStmt, createClientInstallationProduct, arg.CipInstallationID, arg.CipProductID, arg.CipDiscount)
}

const createClientLoan = `-- name: CreateClientLoan :execresult
INSERT INTO clients_loans ( cl_client_id , cl_amount , cl_installments , cl_client_provision , cl_client_prepayment , cl_insured , cl_funding_agency
) VALUES ( 
  ?, ?, ?, ?, ? , ? , ?
)
`

type CreateClientLoanParams struct {
	ClClientID         sql.NullInt32   `json:"cl_client_id"`
	ClAmount           sql.NullFloat64 `json:"cl_amount"`
	ClInstallments     sql.NullFloat64 `json:"cl_installments"`
	ClClientProvision  sql.NullFloat64 `json:"cl_client_provision"`
	ClClientPrepayment sql.NullFloat64 `json:"cl_client_prepayment"`
	ClInsured          sql.NullInt32   `json:"cl_insured"`
	ClFundingAgency    sql.NullString  `json:"cl_funding_agency"`
}

func (q *Queries) CreateClientLoan(ctx context.Context, arg CreateClientLoanParams) (sql.Result, error) {
	return q.exec(ctx, q.createClientLoanStmt, createClientLoan,
		arg.ClClientID,
		arg.ClAmount,
		arg.ClInstallments,
		arg.ClClientProvision,
		arg.ClClientPrepayment,
		arg.ClInsured,
		arg.ClFundingAgency,
	)
}

const createCompany = `-- name: CreateCompany :execresult
INSERT INTO companies (c_geo_id, c_name, c_rcs, c_siret, c_siren, c_intra_eu_vat, c_legal_status, c_creation_date, c_capital) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateCompanyParams struct {
	CGeoID        sql.NullInt32  `json:"c_geo_id"`
	CName         sql.NullString `json:"c_name"`
	CRcs          sql.NullString `json:"c_rcs"`
	CSiret        sql.NullString `json:"c_siret"`
	CSiren        sql.NullString `json:"c_siren"`
	CIntraEuVat   sql.NullString `json:"c_intra_eu_vat"`
	CLegalStatus  sql.NullString `json:"c_legal_status"`
	CCreationDate sql.NullString `json:"c_creation_date"`
	CCapital      sql.NullInt32  `json:"c_capital"`
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (sql.Result, error) {
	return q.exec(ctx, q.createCompanyStmt, createCompany,
		arg.CGeoID,
		arg.CName,
		arg.CRcs,
		arg.CSiret,
		arg.CSiren,
		arg.CIntraEuVat,
		arg.CLegalStatus,
		arg.CCreationDate,
		arg.CCapital,
	)
}

const createEnergiesCost = `-- name: CreateEnergiesCost :execresult
INSERT INTO energies_costs (enc_type, enc_date, enc_cost)
VALUES (?, ?, ?)
`

type CreateEnergiesCostParams struct {
	EncType sql.NullString `json:"enc_type"`
	EncDate sql.NullTime   `json:"enc_date"`
	EncCost sql.NullString `json:"enc_cost"`
}

func (q *Queries) CreateEnergiesCost(ctx context.Context, arg CreateEnergiesCostParams) (sql.Result, error) {
	return q.exec(ctx, q.createEnergiesCostStmt, createEnergiesCost, arg.EncType, arg.EncDate, arg.EncCost)
}

const createEquipmentCatalogue = `-- name: CreateEquipmentCatalogue :execresult
INSERT INTO equipments_catalogue (ec_product_id, ec_quantity, ec_description, ec_date_added, ec_date_updated)
VALUES (?, ?, ?, ?, ?)
`

type CreateEquipmentCatalogueParams struct {
	EcProductID   sql.NullInt32  `json:"ec_product_id"`
	EcQuantity    sql.NullInt32  `json:"ec_quantity"`
	EcDescription sql.NullString `json:"ec_description"`
	EcDateAdded   sql.NullTime   `json:"ec_date_added"`
	EcDateUpdated sql.NullTime   `json:"ec_date_updated"`
}

func (q *Queries) CreateEquipmentCatalogue(ctx context.Context, arg CreateEquipmentCatalogueParams) (sql.Result, error) {
	return q.exec(ctx, q.createEquipmentCatalogueStmt, createEquipmentCatalogue,
		arg.EcProductID,
		arg.EcQuantity,
		arg.EcDescription,
		arg.EcDateAdded,
		arg.EcDateUpdated,
	)
}

const createEquipmentDesignations = `-- name: CreateEquipmentDesignations :execresult
INSERT INTO equipments_designations (ea_product_id, ea_article, ea_description, ea_title)
VALUES (?, ?, ?, ?)
`

type CreateEquipmentDesignationsParams struct {
	EaProductID   sql.NullInt32  `json:"ea_product_id"`
	EaArticle     sql.NullString `json:"ea_article"`
	EaDescription sql.NullString `json:"ea_description"`
	EaTitle       sql.NullString `json:"ea_title"`
}

func (q *Queries) CreateEquipmentDesignations(ctx context.Context, arg CreateEquipmentDesignationsParams) (sql.Result, error) {
	return q.exec(ctx, q.createEquipmentDesignationsStmt, createEquipmentDesignations,
		arg.EaProductID,
		arg.EaArticle,
		arg.EaDescription,
		arg.EaTitle,
	)
}

const createEquipmentInstaller = `-- name: CreateEquipmentInstaller :execresult
INSERT INTO equipments_installers (ei_product_id, ei_company_id)
VALUES (?, ?)
`

type CreateEquipmentInstallerParams struct {
	EiProductID sql.NullInt32 `json:"ei_product_id"`
	EiCompanyID sql.NullInt32 `json:"ei_company_id"`
}

func (q *Queries) CreateEquipmentInstaller(ctx context.Context, arg CreateEquipmentInstallerParams) (sql.Result, error) {
	return q.exec(ctx, q.createEquipmentInstallerStmt, createEquipmentInstaller, arg.EiProductID, arg.EiCompanyID)
}

const createEquipmentProduct = `-- name: CreateEquipmentProduct :execresult
INSERT INTO equipments_products (ep_product_id, ep_price, ep_vat, ep_installation_price)
VALUES ( ?, ?, ?, ?)
`

type CreateEquipmentProductParams struct {
	EpProductID         sql.NullInt32  `json:"ep_product_id"`
	EpPrice             sql.NullString `json:"ep_price"`
	EpVat               sql.NullString `json:"ep_vat"`
	EpInstallationPrice sql.NullString `json:"ep_installation_price"`
}

func (q *Queries) CreateEquipmentProduct(ctx context.Context, arg CreateEquipmentProductParams) (sql.Result, error) {
	return q.exec(ctx, q.createEquipmentProductStmt, createEquipmentProduct,
		arg.EpProductID,
		arg.EpPrice,
		arg.EpVat,
		arg.EpInstallationPrice,
	)
}

const createEquipmentServices = `-- name: CreateEquipmentServices :execresult
INSERT INTO equipments_services (es_description, es_price)
VALUES (?, ?)
`

type CreateEquipmentServicesParams struct {
	EsDescription sql.NullString `json:"es_description"`
	EsPrice       sql.NullString `json:"es_price"`
}

func (q *Queries) CreateEquipmentServices(ctx context.Context, arg CreateEquipmentServicesParams) (sql.Result, error) {
	return q.exec(ctx, q.createEquipmentServicesStmt, createEquipmentServices, arg.EsDescription, arg.EsPrice)
}

const createGeo = `-- name: CreateGeo :execresult
INSERT INTO geo ( chg_zone , chg_latitude , chg_longitude , chg_altitude , chg_department , chg_city , chg_address , chg_postcode
) VALUES ( 
  ?, ?, ?, ?, ? , ? , ? , ?
)
`

type CreateGeoParams struct {
	ChgZone       sql.NullString  `json:"chg_zone"`
	ChgLatitude   sql.NullFloat64 `json:"chg_latitude"`
	ChgLongitude  sql.NullFloat64 `json:"chg_longitude"`
	ChgAltitude   sql.NullInt32   `json:"chg_altitude"`
	ChgDepartment sql.NullInt32   `json:"chg_department"`
	ChgCity       sql.NullString  `json:"chg_city"`
	ChgAddress    sql.NullString  `json:"chg_address"`
	ChgPostcode   sql.NullInt32   `json:"chg_postcode"`
}

func (q *Queries) CreateGeo(ctx context.Context, arg CreateGeoParams) (sql.Result, error) {
	return q.exec(ctx, q.createGeoStmt, createGeo,
		arg.ChgZone,
		arg.ChgLatitude,
		arg.ChgLongitude,
		arg.ChgAltitude,
		arg.ChgDepartment,
		arg.ChgCity,
		arg.ChgAddress,
		arg.ChgPostcode,
	)
}

const createGroup = `-- name: CreateGroup :execresult
INSERT INTO ` + "`" + `groups` + "`" + ` (g_name, g_description
) VALUES ( 
  ?, ?
)
`

type CreateGroupParams struct {
	GName        sql.NullString `json:"g_name"`
	GDescription sql.NullString `json:"g_description"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (sql.Result, error) {
	return q.exec(ctx, q.createGroupStmt, createGroup, arg.GName, arg.GDescription)
}

const createGroupPrivilege = `-- name: CreateGroupPrivilege :execresult
INSERT INTO groups_privileges (gp_privilege
) VALUES (?)
`

func (q *Queries) CreateGroupPrivilege(ctx context.Context, gpPrivilege sql.NullString) (sql.Result, error) {
	return q.exec(ctx, q.createGroupPrivilegeStmt, createGroupPrivilege, gpPrivilege)
}

const createGroupPrivilegeLnk = `-- name: CreateGroupPrivilegeLnk :execresult
INSERT INTO groups_privileges_lnk (gpl_group_id , gpl_privilege_id
) VALUES ( 
  ? , ?
)
`

type CreateGroupPrivilegeLnkParams struct {
	GplGroupID     sql.NullInt32 `json:"gpl_group_id"`
	GplPrivilegeID sql.NullInt32 `json:"gpl_privilege_id"`
}

func (q *Queries) CreateGroupPrivilegeLnk(ctx context.Context, arg CreateGroupPrivilegeLnkParams) (sql.Result, error) {
	return q.exec(ctx, q.createGroupPrivilegeLnkStmt, createGroupPrivilegeLnk, arg.GplGroupID, arg.GplPrivilegeID)
}

const createGroupUserLnk = `-- name: CreateGroupUserLnk :execresult
INSERT INTO groups_users_lnk (gu_user_id , gu_group_id
) VALUES ( ? , ?)
`

type CreateGroupUserLnkParams struct {
	GuUserID  sql.NullInt32 `json:"gu_user_id"`
	GuGroupID sql.NullInt32 `json:"gu_group_id"`
}

func (q *Queries) CreateGroupUserLnk(ctx context.Context, arg CreateGroupUserLnkParams) (sql.Result, error) {
	return q.exec(ctx, q.createGroupUserLnkStmt, createGroupUserLnk, arg.GuUserID, arg.GuGroupID)
}

const createGroupUserLnkByGroupName = `-- name: CreateGroupUserLnkByGroupName :execresult
INSERT INTO groups_users_lnk (gu_group_id, gu_user_id) SELECT ` + "`" + `groups` + "`" + `.g_id, users.user_id FROM ` + "`" + `groups` + "`" + ` JOIN users ON users.user_id = ? WHERE ` + "`" + `groups` + "`" + `.g_name = ?
`

type CreateGroupUserLnkByGroupNameParams struct {
	UserID int32          `json:"user_id"`
	GName  sql.NullString `json:"g_name"`
}

func (q *Queries) CreateGroupUserLnkByGroupName(ctx context.Context, arg CreateGroupUserLnkByGroupNameParams) (sql.Result, error) {
	return q.exec(ctx, q.createGroupUserLnkByGroupNameStmt, createGroupUserLnkByGroupName, arg.UserID, arg.GName)
}

const createLog = `-- name: CreateLog :execresult
INSERT INTO logs ( log_event_desc, log_event_code, log_event_date) VALUES ( 
  ? , ? , ?
)
`

type CreateLogParams struct {
	LogEventDesc sql.NullString `json:"log_event_desc"`
	LogEventCode sql.NullString `json:"log_event_code"`
	LogEventDate sql.NullTime   `json:"log_event_date"`
}

func (q *Queries) CreateLog(ctx context.Context, arg CreateLogParams) (sql.Result, error) {
	return q.exec(ctx, q.createLogStmt, createLog, arg.LogEventDesc, arg.LogEventCode, arg.LogEventDate)
}

const createSalesCommission = `-- name: CreateSalesCommission :execresult
INSERT INTO sales_commissions (sc_commissions_discount_id , sc_group_id
) VALUES ( 
  ? , ? 
)
`

type CreateSalesCommissionParams struct {
	ScCommissionsDiscountID sql.NullInt32 `json:"sc_commissions_discount_id"`
	ScGroupID               sql.NullInt32 `json:"sc_group_id"`
}

func (q *Queries) CreateSalesCommission(ctx context.Context, arg CreateSalesCommissionParams) (sql.Result, error) {
	return q.exec(ctx, q.createSalesCommissionStmt, createSalesCommission, arg.ScCommissionsDiscountID, arg.ScGroupID)
}

const createSalesCommissionDiscount = `-- name: CreateSalesCommissionDiscount :execresult
INSERT INTO sales_commissions_discount ( sc_discount_pct , sc_com_pct  
) VALUES ( 
  ? , ? 
)
`

type CreateSalesCommissionDiscountParams struct {
	ScDiscountPct sql.NullFloat64 `json:"sc_discount_pct"`
	ScComPct      sql.NullFloat64 `json:"sc_com_pct"`
}

func (q *Queries) CreateSalesCommissionDiscount(ctx context.Context, arg CreateSalesCommissionDiscountParams) (sql.Result, error) {
	return q.exec(ctx, q.createSalesCommissionDiscountStmt, createSalesCommissionDiscount, arg.ScDiscountPct, arg.ScComPct)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (user_firstname, user_lastname, user_email, user_phone, user_is_active,  user_date_created, user_recruitment_date 
) VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	UserFirstname       sql.NullString `json:"user_firstname"`
	UserLastname        sql.NullString `json:"user_lastname"`
	UserEmail           sql.NullString `json:"user_email"`
	UserPhone           sql.NullString `json:"user_phone"`
	UserIsActive        sql.NullBool   `json:"user_is_active"`
	UserDateCreated     time.Time      `json:"user_date_created"`
	UserRecruitmentDate sql.NullTime   `json:"user_recruitment_date"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.exec(ctx, q.createUserStmt, createUser,
		arg.UserFirstname,
		arg.UserLastname,
		arg.UserEmail,
		arg.UserPhone,
		arg.UserIsActive,
		arg.UserDateCreated,
		arg.UserRecruitmentDate,
	)
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM equipments_categories WHERE ec_id = ?
`

func (q *Queries) DeleteCategory(ctx context.Context, ecID int32) error {
	_, err := q.exec(ctx, q.deleteCategoryStmt, deleteCategory, ecID)
	return err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM clients
WHERE client_id = ?
`

func (q *Queries) DeleteClient(ctx context.Context, clientID int32) error {
	_, err := q.exec(ctx, q.deleteClientStmt, deleteClient, clientID)
	return err
}

const deleteClientAss = `-- name: DeleteClientAss :exec
DELETE FROM clients_ass
WHERE ca_id = ?
`

func (q *Queries) DeleteClientAss(ctx context.Context, caID int32) error {
	_, err := q.exec(ctx, q.deleteClientAssStmt, deleteClientAss, caID)
	return err
}

const deleteClientHome = `-- name: DeleteClientHome :exec
DELETE FROM clients_homes
WHERE ch_id = ?
`

func (q *Queries) DeleteClientHome(ctx context.Context, chID int32) error {
	_, err := q.exec(ctx, q.deleteClientHomeStmt, deleteClientHome, chID)
	return err
}

const deleteClientHomeBill = `-- name: DeleteClientHomeBill :exec
DELETE FROM clients_homes_bills
WHERE chb_id = ?
`

func (q *Queries) DeleteClientHomeBill(ctx context.Context, chbID int32) error {
	_, err := q.exec(ctx, q.deleteClientHomeBillStmt, deleteClientHomeBill, chbID)
	return err
}

const deleteClientHomeEquipment = `-- name: DeleteClientHomeEquipment :exec
DELETE FROM clients_homes_equipments
WHERE che_id = ?
`

func (q *Queries) DeleteClientHomeEquipment(ctx context.Context, cheID int32) error {
	_, err := q.exec(ctx, q.deleteClientHomeEquipmentStmt, deleteClientHomeEquipment, cheID)
	return err
}

const deleteClientInstallation = `-- name: DeleteClientInstallation :exec
DELETE FROM clients_installations
WHERE ci_id = ?
`

func (q *Queries) DeleteClientInstallation(ctx context.Context, ciID int32) error {
	_, err := q.exec(ctx, q.deleteClientInstallationStmt, deleteClientInstallation, ciID)
	return err
}

const deleteClientInstallationFile = `-- name: DeleteClientInstallationFile :exec
DELETE FROM clients_installations_files
WHERE cif_id = ?
`

func (q *Queries) DeleteClientInstallationFile(ctx context.Context, cifID int32) error {
	_, err := q.exec(ctx, q.deleteClientInstallationFileStmt, deleteClientInstallationFile, cifID)
	return err
}

const deleteClientInstallationPayment = `-- name: DeleteClientInstallationPayment :exec
DELETE FROM clients_installations_payments
WHERE cip_id = ?
`

func (q *Queries) DeleteClientInstallationPayment(ctx context.Context, cipID int32) error {
	_, err := q.exec(ctx, q.deleteClientInstallationPaymentStmt, deleteClientInstallationPayment, cipID)
	return err
}

const deleteClientInstallationProduct = `-- name: DeleteClientInstallationProduct :exec
DELETE FROM clients_installations_products
WHERE cip_id = ?
`

func (q *Queries) DeleteClientInstallationProduct(ctx context.Context, cipID int32) error {
	_, err := q.exec(ctx, q.deleteClientInstallationProductStmt, deleteClientInstallationProduct, cipID)
	return err
}

const deleteClientLoan = `-- name: DeleteClientLoan :exec
DELETE FROM clients_loans
WHERE cl_id = ?
`

func (q *Queries) DeleteClientLoan(ctx context.Context, clID int32) error {
	_, err := q.exec(ctx, q.deleteClientLoanStmt, deleteClientLoan, clID)
	return err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM companies
WHERE c_id = ?
`

func (q *Queries) DeleteCompany(ctx context.Context, cID int32) error {
	_, err := q.exec(ctx, q.deleteCompanyStmt, deleteCompany, cID)
	return err
}

const deleteEnergiesCost = `-- name: DeleteEnergiesCost :exec
DELETE FROM energies_costs WHERE enc_id = ?
`

func (q *Queries) DeleteEnergiesCost(ctx context.Context, encID int32) error {
	_, err := q.exec(ctx, q.deleteEnergiesCostStmt, deleteEnergiesCost, encID)
	return err
}

const deleteEquipmentCatalogue = `-- name: DeleteEquipmentCatalogue :exec
DELETE FROM equipments_catalogue WHERE ec_id = ?
`

func (q *Queries) DeleteEquipmentCatalogue(ctx context.Context, ecID int32) error {
	_, err := q.exec(ctx, q.deleteEquipmentCatalogueStmt, deleteEquipmentCatalogue, ecID)
	return err
}

const deleteEquipmentDesignation = `-- name: DeleteEquipmentDesignation :exec
DELETE FROM equipments_designations WHERE ea_id = ?
`

func (q *Queries) DeleteEquipmentDesignation(ctx context.Context, eaID int32) error {
	_, err := q.exec(ctx, q.deleteEquipmentDesignationStmt, deleteEquipmentDesignation, eaID)
	return err
}

const deleteEquipmentInstaller = `-- name: DeleteEquipmentInstaller :exec
DELETE FROM equipments_installers WHERE ei_id = ?
`

func (q *Queries) DeleteEquipmentInstaller(ctx context.Context, eiID int32) error {
	_, err := q.exec(ctx, q.deleteEquipmentInstallerStmt, deleteEquipmentInstaller, eiID)
	return err
}

const deleteEquipmentProduct = `-- name: DeleteEquipmentProduct :exec
DELETE FROM equipments_products WHERE ep_id = ?
`

func (q *Queries) DeleteEquipmentProduct(ctx context.Context, epID int32) error {
	_, err := q.exec(ctx, q.deleteEquipmentProductStmt, deleteEquipmentProduct, epID)
	return err
}

const deleteEquipmentService = `-- name: DeleteEquipmentService :exec
DELETE FROM equipments_services WHERE es_id = ?
`

func (q *Queries) DeleteEquipmentService(ctx context.Context, esID int32) error {
	_, err := q.exec(ctx, q.deleteEquipmentServiceStmt, deleteEquipmentService, esID)
	return err
}

const deleteGeo = `-- name: DeleteGeo :exec
DELETE FROM geo
WHERE chg_id = ?
`

func (q *Queries) DeleteGeo(ctx context.Context, chgID int32) error {
	_, err := q.exec(ctx, q.deleteGeoStmt, deleteGeo, chgID)
	return err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM ` + "`" + `groups` + "`" + `
WHERE g_id = ?
`

func (q *Queries) DeleteGroup(ctx context.Context, gID int32) error {
	_, err := q.exec(ctx, q.deleteGroupStmt, deleteGroup, gID)
	return err
}

const deleteGroupPrivilege = `-- name: DeleteGroupPrivilege :exec
DELETE FROM groups_privileges
WHERE gp_privilege_id = ?
`

func (q *Queries) DeleteGroupPrivilege(ctx context.Context, gpPrivilegeID int32) error {
	_, err := q.exec(ctx, q.deleteGroupPrivilegeStmt, deleteGroupPrivilege, gpPrivilegeID)
	return err
}

const deleteGroupPrivilegeLnk = `-- name: DeleteGroupPrivilegeLnk :exec
DELETE FROM groups_privileges_lnk
WHERE gpl_id = ?
`

func (q *Queries) DeleteGroupPrivilegeLnk(ctx context.Context, gplID int32) error {
	_, err := q.exec(ctx, q.deleteGroupPrivilegeLnkStmt, deleteGroupPrivilegeLnk, gplID)
	return err
}

const deleteGroupUserLnk = `-- name: DeleteGroupUserLnk :exec
DELETE FROM groups_users_lnk
WHERE gu_id = ?
`

func (q *Queries) DeleteGroupUserLnk(ctx context.Context, guID int32) error {
	_, err := q.exec(ctx, q.deleteGroupUserLnkStmt, deleteGroupUserLnk, guID)
	return err
}

const deleteLog = `-- name: DeleteLog :exec
DELETE FROM logs
WHERE log_id = ?
`

func (q *Queries) DeleteLog(ctx context.Context, logID int32) error {
	_, err := q.exec(ctx, q.deleteLogStmt, deleteLog, logID)
	return err
}

const deleteSalesCommission = `-- name: DeleteSalesCommission :exec
DELETE FROM sales_commissions
WHERE sc_id = ?
`

func (q *Queries) DeleteSalesCommission(ctx context.Context, scID int32) error {
	_, err := q.exec(ctx, q.deleteSalesCommissionStmt, deleteSalesCommission, scID)
	return err
}

const deleteSalesCommissionDiscount = `-- name: DeleteSalesCommissionDiscount :exec
DELETE FROM sales_commissions_discount
WHERE sc_id = ?
`

func (q *Queries) DeleteSalesCommissionDiscount(ctx context.Context, scID int32) error {
	_, err := q.exec(ctx, q.deleteSalesCommissionDiscountStmt, deleteSalesCommissionDiscount, scID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, userID)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT ec_id, ec_category_code, ec_description FROM equipments_categories
WHERE ec_id = ? LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, ecID int32) (EquipmentsCategory, error) {
	row := q.queryRow(ctx, q.getCategoryStmt, getCategory, ecID)
	var i EquipmentsCategory
	err := row.Scan(&i.EcID, &i.EcCategoryCode, &i.EcDescription)
	return i, err
}

const getClient = `-- name: GetClient :one
SELECT client_id, client_last_name, client_first_name, client_email, client_phone, client_fiscal_year_income, client_date_created FROM clients
WHERE client_id = ? LIMIT 1
`

func (q *Queries) GetClient(ctx context.Context, clientID int32) (Client, error) {
	row := q.queryRow(ctx, q.getClientStmt, getClient, clientID)
	var i Client
	err := row.Scan(
		&i.ClientID,
		&i.ClientLastName,
		&i.ClientFirstName,
		&i.ClientEmail,
		&i.ClientPhone,
		&i.ClientFiscalYearIncome,
		&i.ClientDateCreated,
	)
	return i, err
}

const getClientAss = `-- name: GetClientAss :one
SELECT ca_id, ca_client_id, ca_company_id, ca_call_date, ca_call_reason, ca_intervention_date, ca_comment, ca_is_resolved FROM clients_ass
WHERE ca_id = ? LIMIT 1
`

func (q *Queries) GetClientAss(ctx context.Context, caID int32) (ClientsAss, error) {
	row := q.queryRow(ctx, q.getClientAssStmt, getClientAss, caID)
	var i ClientsAss
	err := row.Scan(
		&i.CaID,
		&i.CaClientID,
		&i.CaCompanyID,
		&i.CaCallDate,
		&i.CaCallReason,
		&i.CaInterventionDate,
		&i.CaComment,
		&i.CaIsResolved,
	)
	return i, err
}

const getClientHomeEquipmentParams = `-- name: GetClientHomeEquipmentParams :one
SELECT che_id, che_home_id, che_equipment_type, che_description FROM clients_homes_equipments
WHERE che_id = ? LIMIT 1
`

func (q *Queries) GetClientHomeEquipmentParams(ctx context.Context, cheID int32) (ClientsHomesEquipment, error) {
	row := q.queryRow(ctx, q.getClientHomeEquipmentParamsStmt, getClientHomeEquipmentParams, cheID)
	var i ClientsHomesEquipment
	err := row.Scan(
		&i.CheID,
		&i.CheHomeID,
		&i.CheEquipmentType,
		&i.CheDescription,
	)
	return i, err
}

const getClientHomeParams = `-- name: GetClientHomeParams :one
SELECT ch_id, ch_client_id, ch_geo_id, ch_construction_year, ch_area, ch_residents, ch_roof_positionning, ch_roof_slope, ch_label, ch_tr, ch_huc, ch_isolation FROM clients_homes
WHERE ch_id = ? LIMIT 1
`

func (q *Queries) GetClientHomeParams(ctx context.Context, chID int32) (ClientsHome, error) {
	row := q.queryRow(ctx, q.getClientHomeParamsStmt, getClientHomeParams, chID)
	var i ClientsHome
	err := row.Scan(
		&i.ChID,
		&i.ChClientID,
		&i.ChGeoID,
		&i.ChConstructionYear,
		&i.ChArea,
		&i.ChResidents,
		&i.ChRoofPositionning,
		&i.ChRoofSlope,
		&i.ChLabel,
		&i.ChTr,
		&i.ChHuc,
		&i.ChIsolation,
	)
	return i, err
}

const getClientHomeParamsBill = `-- name: GetClientHomeParamsBill :one
SELECT chb_id, chb_home_id, chb_electricity, chb_natural_gas, chb_propane_gas, chb_wood, chb_heating_oil, chb_year FROM clients_homes_bills
WHERE chb_id = ? LIMIT 1
`

func (q *Queries) GetClientHomeParamsBill(ctx context.Context, chbID int32) (ClientsHomesBill, error) {
	row := q.queryRow(ctx, q.getClientHomeParamsBillStmt, getClientHomeParamsBill, chbID)
	var i ClientsHomesBill
	err := row.Scan(
		&i.ChbID,
		&i.ChbHomeID,
		&i.ChbElectricity,
		&i.ChbNaturalGas,
		&i.ChbPropaneGas,
		&i.ChbWood,
		&i.ChbHeatingOil,
		&i.ChbYear,
	)
	return i, err
}

const getClientInstallation = `-- name: GetClientInstallation :one
SELECT ci_id, ci_client_id, ci_user_id, ci_shared_user_id, ci_creation_date, ci_update_date, ci_status, ci_comments FROM clients_installations
WHERE ci_id = ? LIMIT 1
`

func (q *Queries) GetClientInstallation(ctx context.Context, ciID int32) (ClientsInstallation, error) {
	row := q.queryRow(ctx, q.getClientInstallationStmt, getClientInstallation, ciID)
	var i ClientsInstallation
	err := row.Scan(
		&i.CiID,
		&i.CiClientID,
		&i.CiUserID,
		&i.CiSharedUserID,
		&i.CiCreationDate,
		&i.CiUpdateDate,
		&i.CiStatus,
		&i.CiComments,
	)
	return i, err
}

const getClientInstallationFile = `-- name: GetClientInstallationFile :one
SELECT cif_id, cif_installation_id, cif_file_type, cif_file_url, cif_file_creation_date FROM clients_installations_files
WHERE cif_id = ? LIMIT 1
`

func (q *Queries) GetClientInstallationFile(ctx context.Context, cifID int32) (ClientsInstallationsFile, error) {
	row := q.queryRow(ctx, q.getClientInstallationFileStmt, getClientInstallationFile, cifID)
	var i ClientsInstallationsFile
	err := row.Scan(
		&i.CifID,
		&i.CifInstallationID,
		&i.CifFileType,
		&i.CifFileUrl,
		&i.CifFileCreationDate,
	)
	return i, err
}

const getClientInstallationPayment = `-- name: GetClientInstallationPayment :one
SELECT cip_id, cip_installation_id, cip_amount, cip_type, cip_date, cip_description, cip_transaction_number, cip_vat_rate FROM clients_installations_payments
WHERE cip_id = ? LIMIT 1
`

func (q *Queries) GetClientInstallationPayment(ctx context.Context, cipID int32) (ClientsInstallationsPayment, error) {
	row := q.queryRow(ctx, q.getClientInstallationPaymentStmt, getClientInstallationPayment, cipID)
	var i ClientsInstallationsPayment
	err := row.Scan(
		&i.CipID,
		&i.CipInstallationID,
		&i.CipAmount,
		&i.CipType,
		&i.CipDate,
		&i.CipDescription,
		&i.CipTransactionNumber,
		&i.CipVatRate,
	)
	return i, err
}

const getClientInstallationProduct = `-- name: GetClientInstallationProduct :one
SELECT cip_id, cip_installation_id, cip_product_id, cip_discount FROM clients_installations_products
WHERE cip_id = ? LIMIT 1
`

func (q *Queries) GetClientInstallationProduct(ctx context.Context, cipID int32) (ClientsInstallationsProduct, error) {
	row := q.queryRow(ctx, q.getClientInstallationProductStmt, getClientInstallationProduct, cipID)
	var i ClientsInstallationsProduct
	err := row.Scan(
		&i.CipID,
		&i.CipInstallationID,
		&i.CipProductID,
		&i.CipDiscount,
	)
	return i, err
}

const getClientLoan = `-- name: GetClientLoan :one
SELECT cl_id, cl_client_id, cl_amount, cl_installments, cl_client_provision, cl_client_prepayment, cl_insured, cl_funding_agency FROM clients_loans
WHERE cl_id = ? LIMIT 1
`

func (q *Queries) GetClientLoan(ctx context.Context, clID int32) (ClientsLoan, error) {
	row := q.queryRow(ctx, q.getClientLoanStmt, getClientLoan, clID)
	var i ClientsLoan
	err := row.Scan(
		&i.ClID,
		&i.ClClientID,
		&i.ClAmount,
		&i.ClInstallments,
		&i.ClClientProvision,
		&i.ClClientPrepayment,
		&i.ClInsured,
		&i.ClFundingAgency,
	)
	return i, err
}

const getCompany = `-- name: GetCompany :one
SELECT c_id, c_geo_id, c_name, c_rcs, c_siret, c_siren, c_intra_eu_vat, c_legal_status, c_creation_date, c_capital FROM companies
WHERE c_id = ? LIMIT 1
`

func (q *Queries) GetCompany(ctx context.Context, cID int32) (Company, error) {
	row := q.queryRow(ctx, q.getCompanyStmt, getCompany, cID)
	var i Company
	err := row.Scan(
		&i.CID,
		&i.CGeoID,
		&i.CName,
		&i.CRcs,
		&i.CSiret,
		&i.CSiren,
		&i.CIntraEuVat,
		&i.CLegalStatus,
		&i.CCreationDate,
		&i.CCapital,
	)
	return i, err
}

const getEnergiesCost = `-- name: GetEnergiesCost :one
SELECT enc_id, enc_type, enc_date, enc_cost FROM energies_costs
WHERE enc_id = ? LIMIT 1
`

func (q *Queries) GetEnergiesCost(ctx context.Context, encID int32) (EnergiesCost, error) {
	row := q.queryRow(ctx, q.getEnergiesCostStmt, getEnergiesCost, encID)
	var i EnergiesCost
	err := row.Scan(
		&i.EncID,
		&i.EncType,
		&i.EncDate,
		&i.EncCost,
	)
	return i, err
}

const getEquipmentCatalogue = `-- name: GetEquipmentCatalogue :one
SELECT ec_id, ec_product_id, ec_quantity, ec_description, ec_date_added, ec_date_updated FROM equipments_catalogue
WHERE ec_id = ? LIMIT 1
`

func (q *Queries) GetEquipmentCatalogue(ctx context.Context, ecID int32) (EquipmentsCatalogue, error) {
	row := q.queryRow(ctx, q.getEquipmentCatalogueStmt, getEquipmentCatalogue, ecID)
	var i EquipmentsCatalogue
	err := row.Scan(
		&i.EcID,
		&i.EcProductID,
		&i.EcQuantity,
		&i.EcDescription,
		&i.EcDateAdded,
		&i.EcDateUpdated,
	)
	return i, err
}

const getEquipmentDesignation = `-- name: GetEquipmentDesignation :one
SELECT ea_id, ea_product_id, ea_article, ea_description, ea_title FROM equipments_designations
WHERE ea_id = ? LIMIT 1
`

func (q *Queries) GetEquipmentDesignation(ctx context.Context, eaID int32) (EquipmentsDesignation, error) {
	row := q.queryRow(ctx, q.getEquipmentDesignationStmt, getEquipmentDesignation, eaID)
	var i EquipmentsDesignation
	err := row.Scan(
		&i.EaID,
		&i.EaProductID,
		&i.EaArticle,
		&i.EaDescription,
		&i.EaTitle,
	)
	return i, err
}

const getEquipmentInstaller = `-- name: GetEquipmentInstaller :one
SELECT ei_id, ei_product_id, ei_company_id FROM equipments_installers
WHERE ei_id = ? LIMIT 1
`

func (q *Queries) GetEquipmentInstaller(ctx context.Context, eiID int32) (EquipmentsInstaller, error) {
	row := q.queryRow(ctx, q.getEquipmentInstallerStmt, getEquipmentInstaller, eiID)
	var i EquipmentsInstaller
	err := row.Scan(&i.EiID, &i.EiProductID, &i.EiCompanyID)
	return i, err
}

const getEquipmentProduct = `-- name: GetEquipmentProduct :one
SELECT ep_id, ep_product_id, ep_price, ep_vat, ep_installation_price FROM equipments_products
WHERE ep_id = ? LIMIT 1
`

func (q *Queries) GetEquipmentProduct(ctx context.Context, epID int32) (EquipmentsProduct, error) {
	row := q.queryRow(ctx, q.getEquipmentProductStmt, getEquipmentProduct, epID)
	var i EquipmentsProduct
	err := row.Scan(
		&i.EpID,
		&i.EpProductID,
		&i.EpPrice,
		&i.EpVat,
		&i.EpInstallationPrice,
	)
	return i, err
}

const getEquipmentService = `-- name: GetEquipmentService :one
SELECT es_id, es_description, es_price FROM equipments_services
WHERE es_id = ? LIMIT 1
`

func (q *Queries) GetEquipmentService(ctx context.Context, esID int32) (EquipmentsService, error) {
	row := q.queryRow(ctx, q.getEquipmentServiceStmt, getEquipmentService, esID)
	var i EquipmentsService
	err := row.Scan(&i.EsID, &i.EsDescription, &i.EsPrice)
	return i, err
}

const getGeo = `-- name: GetGeo :one
SELECT chg_id, chg_zone, chg_latitude, chg_longitude, chg_altitude, chg_department, chg_city, chg_address, chg_postcode FROM geo
WHERE chg_id = ? LIMIT 1
`

func (q *Queries) GetGeo(ctx context.Context, chgID int32) (Geo, error) {
	row := q.queryRow(ctx, q.getGeoStmt, getGeo, chgID)
	var i Geo
	err := row.Scan(
		&i.ChgID,
		&i.ChgZone,
		&i.ChgLatitude,
		&i.ChgLongitude,
		&i.ChgAltitude,
		&i.ChgDepartment,
		&i.ChgCity,
		&i.ChgAddress,
		&i.ChgPostcode,
	)
	return i, err
}

const getGroup = `-- name: GetGroup :one
SELECT g_id, g_name, g_description FROM ` + "`" + `groups` + "`" + `
WHERE g_id = ? LIMIT 1
`

func (q *Queries) GetGroup(ctx context.Context, gID int32) (Group, error) {
	row := q.queryRow(ctx, q.getGroupStmt, getGroup, gID)
	var i Group
	err := row.Scan(&i.GID, &i.GName, &i.GDescription)
	return i, err
}

const getGroupByName = `-- name: GetGroupByName :one
SELECT g_id, g_name, g_description FROM ` + "`" + `groups` + "`" + `
WHERE g_name = ? LIMIT 1
`

func (q *Queries) GetGroupByName(ctx context.Context, gName sql.NullString) (Group, error) {
	row := q.queryRow(ctx, q.getGroupByNameStmt, getGroupByName, gName)
	var i Group
	err := row.Scan(&i.GID, &i.GName, &i.GDescription)
	return i, err
}

const getGroupPrivilege = `-- name: GetGroupPrivilege :one
SELECT gp_privilege_id, gp_privilege FROM groups_privileges
WHERE gp_privilege_id = ? LIMIT 1
`

func (q *Queries) GetGroupPrivilege(ctx context.Context, gpPrivilegeID int32) (GroupsPrivilege, error) {
	row := q.queryRow(ctx, q.getGroupPrivilegeStmt, getGroupPrivilege, gpPrivilegeID)
	var i GroupsPrivilege
	err := row.Scan(&i.GpPrivilegeID, &i.GpPrivilege)
	return i, err
}

const getGroupPrivilegeLnk = `-- name: GetGroupPrivilegeLnk :one
SELECT gpl_id, gpl_group_id, gpl_privilege_id FROM groups_privileges_lnk
WHERE gpl_id = ? LIMIT 1
`

func (q *Queries) GetGroupPrivilegeLnk(ctx context.Context, gplID int32) (GroupsPrivilegesLnk, error) {
	row := q.queryRow(ctx, q.getGroupPrivilegeLnkStmt, getGroupPrivilegeLnk, gplID)
	var i GroupsPrivilegesLnk
	err := row.Scan(&i.GplID, &i.GplGroupID, &i.GplPrivilegeID)
	return i, err
}

const getGroupPrivilegesByUserId = `-- name: GetGroupPrivilegesByUserId :many
SELECT DISTINCT p.gp_privilege_id, p.gp_privilege FROM groups_privileges p
INNER JOIN groups_privileges_lnk gp ON p.gp_privilege_id = gp.gpl_privilege_id
INNER JOIN ` + "`" + `groups` + "`" + ` g ON gp.gpl_group_id = g.g_id
INNER JOIN groups_users_lnk gu ON g.g_id = gu.gu_group_id 
INNER JOIN users u ON gu.gu_user_id = u.user_id
WHERE u.user_id = ? ORDER BY p.gp_privilege_id ASC
`

func (q *Queries) GetGroupPrivilegesByUserId(ctx context.Context, userID int32) ([]GroupsPrivilege, error) {
	rows, err := q.query(ctx, q.getGroupPrivilegesByUserIdStmt, getGroupPrivilegesByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GroupsPrivilege{}
	for rows.Next() {
		var i GroupsPrivilege
		if err := rows.Scan(&i.GpPrivilegeID, &i.GpPrivilege); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupUserLnk = `-- name: GetGroupUserLnk :one
SELECT gu_id, gu_user_id, gu_group_id FROM groups_users_lnk
WHERE gu_id = ? LIMIT 1
`

func (q *Queries) GetGroupUserLnk(ctx context.Context, guID int32) (GroupsUsersLnk, error) {
	row := q.queryRow(ctx, q.getGroupUserLnkStmt, getGroupUserLnk, guID)
	var i GroupsUsersLnk
	err := row.Scan(&i.GuID, &i.GuUserID, &i.GuGroupID)
	return i, err
}

const getLog = `-- name: GetLog :one
SELECT log_id, log_event_desc, log_event_code, log_event_date FROM logs
WHERE log_id = ? LIMIT 1
`

func (q *Queries) GetLog(ctx context.Context, logID int32) (Log, error) {
	row := q.queryRow(ctx, q.getLogStmt, getLog, logID)
	var i Log
	err := row.Scan(
		&i.LogID,
		&i.LogEventDesc,
		&i.LogEventCode,
		&i.LogEventDate,
	)
	return i, err
}

const getSalesCommission = `-- name: GetSalesCommission :one
SELECT sc_id, sc_commissions_discount_id, sc_group_id FROM sales_commissions
WHERE sc_id = ? LIMIT 1
`

func (q *Queries) GetSalesCommission(ctx context.Context, scID int32) (SalesCommission, error) {
	row := q.queryRow(ctx, q.getSalesCommissionStmt, getSalesCommission, scID)
	var i SalesCommission
	err := row.Scan(&i.ScID, &i.ScCommissionsDiscountID, &i.ScGroupID)
	return i, err
}

const getSalesCommissionDiscount = `-- name: GetSalesCommissionDiscount :one
SELECT sc_id, sc_discount_pct, sc_com_pct FROM sales_commissions_discount
WHERE sc_id = ? LIMIT 1
`

func (q *Queries) GetSalesCommissionDiscount(ctx context.Context, scID int32) (SalesCommissionsDiscount, error) {
	row := q.queryRow(ctx, q.getSalesCommissionDiscountStmt, getSalesCommissionDiscount, scID)
	var i SalesCommissionsDiscount
	err := row.Scan(&i.ScID, &i.ScDiscountPct, &i.ScComPct)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT user_id, user_firstname, user_lastname, user_email, user_phone, user_is_active, user_date_created, user_recruitment_date FROM users
WHERE user_id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID int32) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserFirstname,
		&i.UserLastname,
		&i.UserEmail,
		&i.UserPhone,
		&i.UserIsActive,
		&i.UserDateCreated,
		&i.UserRecruitmentDate,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, user_firstname, user_lastname, user_email, user_phone, user_is_active, user_date_created, user_recruitment_date FROM users
WHERE user_email = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, userEmail sql.NullString) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, userEmail)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserFirstname,
		&i.UserLastname,
		&i.UserEmail,
		&i.UserPhone,
		&i.UserIsActive,
		&i.UserDateCreated,
		&i.UserRecruitmentDate,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT ec_id, ec_category_code, ec_description FROM equipments_categories
ORDER BY ec_id ASC
`

func (q *Queries) ListCategories(ctx context.Context) ([]EquipmentsCategory, error) {
	rows, err := q.query(ctx, q.listCategoriesStmt, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EquipmentsCategory{}
	for rows.Next() {
		var i EquipmentsCategory
		if err := rows.Scan(&i.EcID, &i.EcCategoryCode, &i.EcDescription); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClientInstallationProducts = `-- name: ListClientInstallationProducts :many
SELECT cip_id, cip_installation_id, cip_product_id, cip_discount FROM clients_installations_products
ORDER BY cip_id ASC
`

func (q *Queries) ListClientInstallationProducts(ctx context.Context) ([]ClientsInstallationsProduct, error) {
	rows, err := q.query(ctx, q.listClientInstallationProductsStmt, listClientInstallationProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ClientsInstallationsProduct{}
	for rows.Next() {
		var i ClientsInstallationsProduct
		if err := rows.Scan(
			&i.CipID,
			&i.CipInstallationID,
			&i.CipProductID,
			&i.CipDiscount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClients = `-- name: ListClients :many
SELECT client_id, client_last_name, client_first_name, client_email, client_phone, client_fiscal_year_income, client_date_created FROM clients
ORDER BY client_id ASC
`

func (q *Queries) ListClients(ctx context.Context) ([]Client, error) {
	rows, err := q.query(ctx, q.listClientsStmt, listClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Client{}
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ClientID,
			&i.ClientLastName,
			&i.ClientFirstName,
			&i.ClientEmail,
			&i.ClientPhone,
			&i.ClientFiscalYearIncome,
			&i.ClientDateCreated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClientsAss = `-- name: ListClientsAss :many
SELECT ca_id, ca_client_id, ca_company_id, ca_call_date, ca_call_reason, ca_intervention_date, ca_comment, ca_is_resolved FROM clients_ass
ORDER BY ca_id ASC
`

func (q *Queries) ListClientsAss(ctx context.Context) ([]ClientsAss, error) {
	rows, err := q.query(ctx, q.listClientsAssStmt, listClientsAss)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ClientsAss{}
	for rows.Next() {
		var i ClientsAss
		if err := rows.Scan(
			&i.CaID,
			&i.CaClientID,
			&i.CaCompanyID,
			&i.CaCallDate,
			&i.CaCallReason,
			&i.CaInterventionDate,
			&i.CaComment,
			&i.CaIsResolved,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClientsByUser = `-- name: ListClientsByUser :many
SELECT c.client_id, c.client_last_name, c.client_first_name, c.client_email, c.client_phone, c.client_fiscal_year_income, c.client_date_created
FROM ` + "`" + `clients` + "`" + ` c
INNER JOIN ` + "`" + `clients_installations` + "`" + ` ci ON ci.ci_client_id = c.client_id
WHERE ci.ci_user_id = ?
`

func (q *Queries) ListClientsByUser(ctx context.Context, ciUserID sql.NullInt32) ([]Client, error) {
	rows, err := q.query(ctx, q.listClientsByUserStmt, listClientsByUser, ciUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Client{}
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ClientID,
			&i.ClientLastName,
			&i.ClientFirstName,
			&i.ClientEmail,
			&i.ClientPhone,
			&i.ClientFiscalYearIncome,
			&i.ClientDateCreated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClientsHomes = `-- name: ListClientsHomes :many
SELECT ch_id, ch_client_id, ch_geo_id, ch_construction_year, ch_area, ch_residents, ch_roof_positionning, ch_roof_slope, ch_label, ch_tr, ch_huc, ch_isolation FROM clients_homes
ORDER BY ch_id ASC
`

func (q *Queries) ListClientsHomes(ctx context.Context) ([]ClientsHome, error) {
	rows, err := q.query(ctx, q.listClientsHomesStmt, listClientsHomes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ClientsHome{}
	for rows.Next() {
		var i ClientsHome
		if err := rows.Scan(
			&i.ChID,
			&i.ChClientID,
			&i.ChGeoID,
			&i.ChConstructionYear,
			&i.ChArea,
			&i.ChResidents,
			&i.ChRoofPositionning,
			&i.ChRoofSlope,
			&i.ChLabel,
			&i.ChTr,
			&i.ChHuc,
			&i.ChIsolation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClientsHomesBills = `-- name: ListClientsHomesBills :many
SELECT chb_id, chb_home_id, chb_electricity, chb_natural_gas, chb_propane_gas, chb_wood, chb_heating_oil, chb_year FROM clients_homes_bills
ORDER BY chb_id ASC
`

func (q *Queries) ListClientsHomesBills(ctx context.Context) ([]ClientsHomesBill, error) {
	rows, err := q.query(ctx, q.listClientsHomesBillsStmt, listClientsHomesBills)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ClientsHomesBill{}
	for rows.Next() {
		var i ClientsHomesBill
		if err := rows.Scan(
			&i.ChbID,
			&i.ChbHomeID,
			&i.ChbElectricity,
			&i.ChbNaturalGas,
			&i.ChbPropaneGas,
			&i.ChbWood,
			&i.ChbHeatingOil,
			&i.ChbYear,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClientsHomesEquipments = `-- name: ListClientsHomesEquipments :many
SELECT che_id, che_home_id, che_equipment_type, che_description FROM clients_homes_equipments
ORDER BY che_id ASC
`

func (q *Queries) ListClientsHomesEquipments(ctx context.Context) ([]ClientsHomesEquipment, error) {
	rows, err := q.query(ctx, q.listClientsHomesEquipmentsStmt, listClientsHomesEquipments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ClientsHomesEquipment{}
	for rows.Next() {
		var i ClientsHomesEquipment
		if err := rows.Scan(
			&i.CheID,
			&i.CheHomeID,
			&i.CheEquipmentType,
			&i.CheDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClientsIdByUser = `-- name: ListClientsIdByUser :many
SELECT c.client_id
FROM ` + "`" + `clients` + "`" + ` c
INNER JOIN ` + "`" + `clients_installations` + "`" + ` ci ON ci.ci_client_id = c.client_id
WHERE ci.ci_user_id = ?
`

func (q *Queries) ListClientsIdByUser(ctx context.Context, ciUserID sql.NullInt32) ([]int32, error) {
	rows, err := q.query(ctx, q.listClientsIdByUserStmt, listClientsIdByUser, ciUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int32{}
	for rows.Next() {
		var client_id int32
		if err := rows.Scan(&client_id); err != nil {
			return nil, err
		}
		items = append(items, client_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClientsInstallation = `-- name: ListClientsInstallation :many
SELECT ci_id, ci_client_id, ci_user_id, ci_shared_user_id, ci_creation_date, ci_update_date, ci_status, ci_comments FROM clients_installations
ORDER BY ci_id ASC
`

func (q *Queries) ListClientsInstallation(ctx context.Context) ([]ClientsInstallation, error) {
	rows, err := q.query(ctx, q.listClientsInstallationStmt, listClientsInstallation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ClientsInstallation{}
	for rows.Next() {
		var i ClientsInstallation
		if err := rows.Scan(
			&i.CiID,
			&i.CiClientID,
			&i.CiUserID,
			&i.CiSharedUserID,
			&i.CiCreationDate,
			&i.CiUpdateDate,
			&i.CiStatus,
			&i.CiComments,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClientsInstallationFiles = `-- name: ListClientsInstallationFiles :many
SELECT cif_id, cif_installation_id, cif_file_type, cif_file_url, cif_file_creation_date FROM clients_installations_files
ORDER BY cif_id ASC
`

func (q *Queries) ListClientsInstallationFiles(ctx context.Context) ([]ClientsInstallationsFile, error) {
	rows, err := q.query(ctx, q.listClientsInstallationFilesStmt, listClientsInstallationFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ClientsInstallationsFile{}
	for rows.Next() {
		var i ClientsInstallationsFile
		if err := rows.Scan(
			&i.CifID,
			&i.CifInstallationID,
			&i.CifFileType,
			&i.CifFileUrl,
			&i.CifFileCreationDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClientsInstallationsPayments = `-- name: ListClientsInstallationsPayments :many
SELECT cip_id, cip_installation_id, cip_amount, cip_type, cip_date, cip_description, cip_transaction_number, cip_vat_rate FROM clients_installations_payments
ORDER BY cip_id ASC
`

func (q *Queries) ListClientsInstallationsPayments(ctx context.Context) ([]ClientsInstallationsPayment, error) {
	rows, err := q.query(ctx, q.listClientsInstallationsPaymentsStmt, listClientsInstallationsPayments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ClientsInstallationsPayment{}
	for rows.Next() {
		var i ClientsInstallationsPayment
		if err := rows.Scan(
			&i.CipID,
			&i.CipInstallationID,
			&i.CipAmount,
			&i.CipType,
			&i.CipDate,
			&i.CipDescription,
			&i.CipTransactionNumber,
			&i.CipVatRate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClientsLoans = `-- name: ListClientsLoans :many
SELECT cl_id, cl_client_id, cl_amount, cl_installments, cl_client_provision, cl_client_prepayment, cl_insured, cl_funding_agency FROM clients_loans
ORDER BY cl_id ASC
`

func (q *Queries) ListClientsLoans(ctx context.Context) ([]ClientsLoan, error) {
	rows, err := q.query(ctx, q.listClientsLoansStmt, listClientsLoans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ClientsLoan{}
	for rows.Next() {
		var i ClientsLoan
		if err := rows.Scan(
			&i.ClID,
			&i.ClClientID,
			&i.ClAmount,
			&i.ClInstallments,
			&i.ClClientProvision,
			&i.ClClientPrepayment,
			&i.ClInsured,
			&i.ClFundingAgency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCompanies = `-- name: ListCompanies :many
SELECT c_id, c_geo_id, c_name, c_rcs, c_siret, c_siren, c_intra_eu_vat, c_legal_status, c_creation_date, c_capital FROM companies ORDER BY c_id ASC
`

func (q *Queries) ListCompanies(ctx context.Context) ([]Company, error) {
	rows, err := q.query(ctx, q.listCompaniesStmt, listCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Company{}
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.CID,
			&i.CGeoID,
			&i.CName,
			&i.CRcs,
			&i.CSiret,
			&i.CSiren,
			&i.CIntraEuVat,
			&i.CLegalStatus,
			&i.CCreationDate,
			&i.CCapital,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEnergiesCosts = `-- name: ListEnergiesCosts :many
SELECT enc_id, enc_type, enc_date, enc_cost FROM energies_costs
ORDER BY enc_id ASC
`

func (q *Queries) ListEnergiesCosts(ctx context.Context) ([]EnergiesCost, error) {
	rows, err := q.query(ctx, q.listEnergiesCostsStmt, listEnergiesCosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EnergiesCost{}
	for rows.Next() {
		var i EnergiesCost
		if err := rows.Scan(
			&i.EncID,
			&i.EncType,
			&i.EncDate,
			&i.EncCost,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEquipmentCatalogue = `-- name: ListEquipmentCatalogue :many
SELECT ec_id, ec_product_id, ec_quantity, ec_description, ec_date_added, ec_date_updated FROM equipments_catalogue
ORDER BY ec_id ASC
`

func (q *Queries) ListEquipmentCatalogue(ctx context.Context) ([]EquipmentsCatalogue, error) {
	rows, err := q.query(ctx, q.listEquipmentCatalogueStmt, listEquipmentCatalogue)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EquipmentsCatalogue{}
	for rows.Next() {
		var i EquipmentsCatalogue
		if err := rows.Scan(
			&i.EcID,
			&i.EcProductID,
			&i.EcQuantity,
			&i.EcDescription,
			&i.EcDateAdded,
			&i.EcDateUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEquipmentDesignations = `-- name: ListEquipmentDesignations :many
SELECT ea_id, ea_product_id, ea_article, ea_description, ea_title FROM equipments_designations
ORDER BY ea_id ASC
`

func (q *Queries) ListEquipmentDesignations(ctx context.Context) ([]EquipmentsDesignation, error) {
	rows, err := q.query(ctx, q.listEquipmentDesignationsStmt, listEquipmentDesignations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EquipmentsDesignation{}
	for rows.Next() {
		var i EquipmentsDesignation
		if err := rows.Scan(
			&i.EaID,
			&i.EaProductID,
			&i.EaArticle,
			&i.EaDescription,
			&i.EaTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEquipmentInstallers = `-- name: ListEquipmentInstallers :many
SELECT ei_id, ei_product_id, ei_company_id FROM equipments_installers
ORDER BY ei_id ASC
`

func (q *Queries) ListEquipmentInstallers(ctx context.Context) ([]EquipmentsInstaller, error) {
	rows, err := q.query(ctx, q.listEquipmentInstallersStmt, listEquipmentInstallers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EquipmentsInstaller{}
	for rows.Next() {
		var i EquipmentsInstaller
		if err := rows.Scan(&i.EiID, &i.EiProductID, &i.EiCompanyID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEquipmentProducts = `-- name: ListEquipmentProducts :many
SELECT ep_id, ep_product_id, ep_price, ep_vat, ep_installation_price FROM equipments_products
ORDER BY ep_id ASC
`

func (q *Queries) ListEquipmentProducts(ctx context.Context) ([]EquipmentsProduct, error) {
	rows, err := q.query(ctx, q.listEquipmentProductsStmt, listEquipmentProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EquipmentsProduct{}
	for rows.Next() {
		var i EquipmentsProduct
		if err := rows.Scan(
			&i.EpID,
			&i.EpProductID,
			&i.EpPrice,
			&i.EpVat,
			&i.EpInstallationPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEquipmentServices = `-- name: ListEquipmentServices :many
SELECT es_id, es_description, es_price FROM equipments_services
ORDER BY es_id ASC
`

func (q *Queries) ListEquipmentServices(ctx context.Context) ([]EquipmentsService, error) {
	rows, err := q.query(ctx, q.listEquipmentServicesStmt, listEquipmentServices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EquipmentsService{}
	for rows.Next() {
		var i EquipmentsService
		if err := rows.Scan(&i.EsID, &i.EsDescription, &i.EsPrice); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGeo = `-- name: ListGeo :many
SELECT chg_id, chg_zone, chg_latitude, chg_longitude, chg_altitude, chg_department, chg_city, chg_address, chg_postcode FROM geo
ORDER BY chg_id ASC
`

func (q *Queries) ListGeo(ctx context.Context) ([]Geo, error) {
	rows, err := q.query(ctx, q.listGeoStmt, listGeo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Geo{}
	for rows.Next() {
		var i Geo
		if err := rows.Scan(
			&i.ChgID,
			&i.ChgZone,
			&i.ChgLatitude,
			&i.ChgLongitude,
			&i.ChgAltitude,
			&i.ChgDepartment,
			&i.ChgCity,
			&i.ChgAddress,
			&i.ChgPostcode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroupPrivilegesLnk = `-- name: ListGroupPrivilegesLnk :many
SELECT gpl_id, gpl_group_id, gpl_privilege_id FROM groups_privileges_lnk
ORDER BY gpl_id ASC
`

func (q *Queries) ListGroupPrivilegesLnk(ctx context.Context) ([]GroupsPrivilegesLnk, error) {
	rows, err := q.query(ctx, q.listGroupPrivilegesLnkStmt, listGroupPrivilegesLnk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GroupsPrivilegesLnk{}
	for rows.Next() {
		var i GroupsPrivilegesLnk
		if err := rows.Scan(&i.GplID, &i.GplGroupID, &i.GplPrivilegeID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroups = `-- name: ListGroups :many
SELECT g_id, g_name, g_description FROM ` + "`" + `groups` + "`" + `
ORDER BY g_id ASC
`

func (q *Queries) ListGroups(ctx context.Context) ([]Group, error) {
	rows, err := q.query(ctx, q.listGroupsStmt, listGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(&i.GID, &i.GName, &i.GDescription); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroupsByUser = `-- name: ListGroupsByUser :many
SELECT g.g_id, g.g_name, g.g_description FROM ` + "`" + `groups` + "`" + ` g
INNER JOIN ` + "`" + `groups_users_lnk` + "`" + ` gul ON gul.gu_group_id = g.g_id
WHERE gul.gu_user_id = ? ORDER BY g.g_id ASC
`

func (q *Queries) ListGroupsByUser(ctx context.Context, guUserID sql.NullInt32) ([]Group, error) {
	rows, err := q.query(ctx, q.listGroupsByUserStmt, listGroupsByUser, guUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(&i.GID, &i.GName, &i.GDescription); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroupsPrivileges = `-- name: ListGroupsPrivileges :many
SELECT gp_privilege_id, gp_privilege FROM groups_privileges
ORDER BY gp_privilege_id ASC
`

func (q *Queries) ListGroupsPrivileges(ctx context.Context) ([]GroupsPrivilege, error) {
	rows, err := q.query(ctx, q.listGroupsPrivilegesStmt, listGroupsPrivileges)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GroupsPrivilege{}
	for rows.Next() {
		var i GroupsPrivilege
		if err := rows.Scan(&i.GpPrivilegeID, &i.GpPrivilege); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroupsUsersLnk = `-- name: ListGroupsUsersLnk :many
SELECT gu_id, gu_user_id, gu_group_id FROM groups_users_lnk
ORDER BY gu_id ASC
`

func (q *Queries) ListGroupsUsersLnk(ctx context.Context) ([]GroupsUsersLnk, error) {
	rows, err := q.query(ctx, q.listGroupsUsersLnkStmt, listGroupsUsersLnk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GroupsUsersLnk{}
	for rows.Next() {
		var i GroupsUsersLnk
		if err := rows.Scan(&i.GuID, &i.GuUserID, &i.GuGroupID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLogs = `-- name: ListLogs :many
SELECT log_id, log_event_desc, log_event_code, log_event_date FROM logs
ORDER BY log_id ASC
`

func (q *Queries) ListLogs(ctx context.Context) ([]Log, error) {
	rows, err := q.query(ctx, q.listLogsStmt, listLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Log{}
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.LogID,
			&i.LogEventDesc,
			&i.LogEventCode,
			&i.LogEventDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSalesCommissions = `-- name: ListSalesCommissions :many
SELECT sc_id, sc_commissions_discount_id, sc_group_id FROM sales_commissions
ORDER BY sc_id ASC
`

func (q *Queries) ListSalesCommissions(ctx context.Context) ([]SalesCommission, error) {
	rows, err := q.query(ctx, q.listSalesCommissionsStmt, listSalesCommissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SalesCommission{}
	for rows.Next() {
		var i SalesCommission
		if err := rows.Scan(&i.ScID, &i.ScCommissionsDiscountID, &i.ScGroupID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSalesCommissionsDiscounts = `-- name: ListSalesCommissionsDiscounts :many
SELECT sc_id, sc_discount_pct, sc_com_pct FROM sales_commissions_discount
ORDER BY sc_id ASC
`

func (q *Queries) ListSalesCommissionsDiscounts(ctx context.Context) ([]SalesCommissionsDiscount, error) {
	rows, err := q.query(ctx, q.listSalesCommissionsDiscountsStmt, listSalesCommissionsDiscounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SalesCommissionsDiscount{}
	for rows.Next() {
		var i SalesCommissionsDiscount
		if err := rows.Scan(&i.ScID, &i.ScDiscountPct, &i.ScComPct); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, user_firstname, user_lastname, user_email, user_phone, user_is_active, user_date_created, user_recruitment_date FROM users
ORDER BY user_id ASC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.listUsersStmt, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.UserFirstname,
			&i.UserLastname,
			&i.UserEmail,
			&i.UserPhone,
			&i.UserIsActive,
			&i.UserDateCreated,
			&i.UserRecruitmentDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :exec
UPDATE equipments_categories SET ec_category_code=?, ec_description=? WHERE ec_id=?
`

type UpdateCategoryParams struct {
	EcCategoryCode sql.NullString `json:"ec_category_code"`
	EcDescription  sql.NullString `json:"ec_description"`
	EcID           int32          `json:"ec_id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.exec(ctx, q.updateCategoryStmt, updateCategory, arg.EcCategoryCode, arg.EcDescription, arg.EcID)
	return err
}

const updateClient = `-- name: UpdateClient :exec
UPDATE clients SET client_last_name = ?, client_first_name= ?, client_email = ?, client_phone = ?, client_fiscal_year_income = ? 
WHERE client_id = ?
`

type UpdateClientParams struct {
	ClientLastName         sql.NullString `json:"client_last_name"`
	ClientFirstName        sql.NullString `json:"client_first_name"`
	ClientEmail            sql.NullString `json:"client_email"`
	ClientPhone            sql.NullString `json:"client_phone"`
	ClientFiscalYearIncome sql.NullInt32  `json:"client_fiscal_year_income"`
	ClientID               int32          `json:"client_id"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) error {
	_, err := q.exec(ctx, q.updateClientStmt, updateClient,
		arg.ClientLastName,
		arg.ClientFirstName,
		arg.ClientEmail,
		arg.ClientPhone,
		arg.ClientFiscalYearIncome,
		arg.ClientID,
	)
	return err
}

const updateClientAss = `-- name: UpdateClientAss :exec
UPDATE clients_ass SET ca_client_id = ?, ca_company_id= ?, ca_call_date = ?, ca_call_reason = ?, ca_intervention_date = ?, ca_comment = ?, ca_is_resolved = ?
WHERE ca_id = ?
`

type UpdateClientAssParams struct {
	CaClientID         sql.NullInt32  `json:"ca_client_id"`
	CaCompanyID        sql.NullInt32  `json:"ca_company_id"`
	CaCallDate         sql.NullTime   `json:"ca_call_date"`
	CaCallReason       sql.NullString `json:"ca_call_reason"`
	CaInterventionDate sql.NullTime   `json:"ca_intervention_date"`
	CaComment          sql.NullString `json:"ca_comment"`
	CaIsResolved       sql.NullBool   `json:"ca_is_resolved"`
	CaID               int32          `json:"ca_id"`
}

func (q *Queries) UpdateClientAss(ctx context.Context, arg UpdateClientAssParams) error {
	_, err := q.exec(ctx, q.updateClientAssStmt, updateClientAss,
		arg.CaClientID,
		arg.CaCompanyID,
		arg.CaCallDate,
		arg.CaCallReason,
		arg.CaInterventionDate,
		arg.CaComment,
		arg.CaIsResolved,
		arg.CaID,
	)
	return err
}

const updateClientHome = `-- name: UpdateClientHome :exec
UPDATE clients_homes SET ch_client_id = ?, ch_geo_id = ?, ch_construction_year = ?, ch_area = ?, ch_residents = ?, ch_roof_positionning = ?, ch_roof_slope = ?, ch_label = ?, ch_tr = ?, ch_huc = ?, ch_isolation = ?
WHERE ch_id = ?
`

type UpdateClientHomeParams struct {
	ChClientID         sql.NullInt32   `json:"ch_client_id"`
	ChGeoID            sql.NullInt32   `json:"ch_geo_id"`
	ChConstructionYear sql.NullInt32   `json:"ch_construction_year"`
	ChArea             sql.NullInt32   `json:"ch_area"`
	ChResidents        sql.NullInt32   `json:"ch_residents"`
	ChRoofPositionning sql.NullString  `json:"ch_roof_positionning"`
	ChRoofSlope        sql.NullInt32   `json:"ch_roof_slope"`
	ChLabel            sql.NullString  `json:"ch_label"`
	ChTr               sql.NullInt32   `json:"ch_tr"`
	ChHuc              sql.NullFloat64 `json:"ch_huc"`
	ChIsolation        sql.NullString  `json:"ch_isolation"`
	ChID               int32           `json:"ch_id"`
}

func (q *Queries) UpdateClientHome(ctx context.Context, arg UpdateClientHomeParams) error {
	_, err := q.exec(ctx, q.updateClientHomeStmt, updateClientHome,
		arg.ChClientID,
		arg.ChGeoID,
		arg.ChConstructionYear,
		arg.ChArea,
		arg.ChResidents,
		arg.ChRoofPositionning,
		arg.ChRoofSlope,
		arg.ChLabel,
		arg.ChTr,
		arg.ChHuc,
		arg.ChIsolation,
		arg.ChID,
	)
	return err
}

const updateClientHomeBill = `-- name: UpdateClientHomeBill :exec
UPDATE clients_homes_bills SET chb_home_id=?, chb_electricity=?, chb_natural_gas=?, chb_propane_gas=?, chb_wood=?, chb_heating_oil=?, chb_year=?
WHERE chb_id = ?
`

type UpdateClientHomeBillParams struct {
	ChbHomeID      sql.NullInt32 `json:"chb_home_id"`
	ChbElectricity sql.NullInt32 `json:"chb_electricity"`
	ChbNaturalGas  sql.NullInt32 `json:"chb_natural_gas"`
	ChbPropaneGas  sql.NullInt32 `json:"chb_propane_gas"`
	ChbWood        sql.NullInt32 `json:"chb_wood"`
	ChbHeatingOil  sql.NullInt32 `json:"chb_heating_oil"`
	ChbYear        sql.NullInt32 `json:"chb_year"`
	ChbID          int32         `json:"chb_id"`
}

func (q *Queries) UpdateClientHomeBill(ctx context.Context, arg UpdateClientHomeBillParams) error {
	_, err := q.exec(ctx, q.updateClientHomeBillStmt, updateClientHomeBill,
		arg.ChbHomeID,
		arg.ChbElectricity,
		arg.ChbNaturalGas,
		arg.ChbPropaneGas,
		arg.ChbWood,
		arg.ChbHeatingOil,
		arg.ChbYear,
		arg.ChbID,
	)
	return err
}

const updateClientHomeEquipment = `-- name: UpdateClientHomeEquipment :exec
UPDATE clients_homes_equipments SET che_home_id=?, che_equipment_type=?, che_description=?
WHERE che_id = ?
`

type UpdateClientHomeEquipmentParams struct {
	CheHomeID        sql.NullInt32  `json:"che_home_id"`
	CheEquipmentType sql.NullString `json:"che_equipment_type"`
	CheDescription   sql.NullString `json:"che_description"`
	CheID            int32          `json:"che_id"`
}

func (q *Queries) UpdateClientHomeEquipment(ctx context.Context, arg UpdateClientHomeEquipmentParams) error {
	_, err := q.exec(ctx, q.updateClientHomeEquipmentStmt, updateClientHomeEquipment,
		arg.CheHomeID,
		arg.CheEquipmentType,
		arg.CheDescription,
		arg.CheID,
	)
	return err
}

const updateClientInstallation = `-- name: UpdateClientInstallation :exec
UPDATE clients_installations SET ci_client_id=?, ci_user_id=?, ci_shared_user_id=?, ci_creation_date=?, ci_update_date=?, ci_status=?, ci_comments=?
WHERE ci_id = ?
`

type UpdateClientInstallationParams struct {
	CiClientID     sql.NullInt32  `json:"ci_client_id"`
	CiUserID       sql.NullInt32  `json:"ci_user_id"`
	CiSharedUserID sql.NullInt32  `json:"ci_shared_user_id"`
	CiCreationDate sql.NullTime   `json:"ci_creation_date"`
	CiUpdateDate   sql.NullTime   `json:"ci_update_date"`
	CiStatus       sql.NullString `json:"ci_status"`
	CiComments     sql.NullString `json:"ci_comments"`
	CiID           int32          `json:"ci_id"`
}

func (q *Queries) UpdateClientInstallation(ctx context.Context, arg UpdateClientInstallationParams) error {
	_, err := q.exec(ctx, q.updateClientInstallationStmt, updateClientInstallation,
		arg.CiClientID,
		arg.CiUserID,
		arg.CiSharedUserID,
		arg.CiCreationDate,
		arg.CiUpdateDate,
		arg.CiStatus,
		arg.CiComments,
		arg.CiID,
	)
	return err
}

const updateClientInstallationFile = `-- name: UpdateClientInstallationFile :exec
UPDATE clients_installations_files SET cif_installation_id = ?, cif_file_type = ?, cif_file_url = ?, cif_file_creation_date = ?
WHERE cif_id = ?
`

type UpdateClientInstallationFileParams struct {
	CifInstallationID   sql.NullInt32  `json:"cif_installation_id"`
	CifFileType         sql.NullString `json:"cif_file_type"`
	CifFileUrl          sql.NullString `json:"cif_file_url"`
	CifFileCreationDate sql.NullTime   `json:"cif_file_creation_date"`
	CifID               int32          `json:"cif_id"`
}

func (q *Queries) UpdateClientInstallationFile(ctx context.Context, arg UpdateClientInstallationFileParams) error {
	_, err := q.exec(ctx, q.updateClientInstallationFileStmt, updateClientInstallationFile,
		arg.CifInstallationID,
		arg.CifFileType,
		arg.CifFileUrl,
		arg.CifFileCreationDate,
		arg.CifID,
	)
	return err
}

const updateClientInstallationPayment = `-- name: UpdateClientInstallationPayment :exec
UPDATE clients_installations_payments SET cip_amount = ?, cip_type= ?, cip_date = ?, cip_installation_id = ?, cip_description = ? , cip_transaction_number = ? , cip_vat_rate = ?
WHERE cip_id = ?
`

type UpdateClientInstallationPaymentParams struct {
	CipAmount            sql.NullFloat64 `json:"cip_amount"`
	CipType              sql.NullString  `json:"cip_type"`
	CipDate              sql.NullTime    `json:"cip_date"`
	CipInstallationID    sql.NullInt32   `json:"cip_installation_id"`
	CipDescription       sql.NullString  `json:"cip_description"`
	CipTransactionNumber sql.NullString  `json:"cip_transaction_number"`
	CipVatRate           sql.NullFloat64 `json:"cip_vat_rate"`
	CipID                int32           `json:"cip_id"`
}

func (q *Queries) UpdateClientInstallationPayment(ctx context.Context, arg UpdateClientInstallationPaymentParams) error {
	_, err := q.exec(ctx, q.updateClientInstallationPaymentStmt, updateClientInstallationPayment,
		arg.CipAmount,
		arg.CipType,
		arg.CipDate,
		arg.CipInstallationID,
		arg.CipDescription,
		arg.CipTransactionNumber,
		arg.CipVatRate,
		arg.CipID,
	)
	return err
}

const updateClientInstallationProduct = `-- name: UpdateClientInstallationProduct :exec
UPDATE clients_installations_products SET  cip_installation_id = ?, cip_product_id = ?, cip_discount = ?
WHERE cip_id = ?
`

type UpdateClientInstallationProductParams struct {
	CipInstallationID sql.NullInt32  `json:"cip_installation_id"`
	CipProductID      sql.NullInt32  `json:"cip_product_id"`
	CipDiscount       sql.NullString `json:"cip_discount"`
	CipID             int32          `json:"cip_id"`
}

func (q *Queries) UpdateClientInstallationProduct(ctx context.Context, arg UpdateClientInstallationProductParams) error {
	_, err := q.exec(ctx, q.updateClientInstallationProductStmt, updateClientInstallationProduct,
		arg.CipInstallationID,
		arg.CipProductID,
		arg.CipDiscount,
		arg.CipID,
	)
	return err
}

const updateClientLoan = `-- name: UpdateClientLoan :exec
UPDATE clients_loans SET cl_client_id = ?, cl_amount= ?, cl_installments = ?, cl_client_provision = ?, cl_client_prepayment = ? , cl_insured = ? , cl_funding_agency = ?
WHERE cl_id = ?
`

type UpdateClientLoanParams struct {
	ClClientID         sql.NullInt32   `json:"cl_client_id"`
	ClAmount           sql.NullFloat64 `json:"cl_amount"`
	ClInstallments     sql.NullFloat64 `json:"cl_installments"`
	ClClientProvision  sql.NullFloat64 `json:"cl_client_provision"`
	ClClientPrepayment sql.NullFloat64 `json:"cl_client_prepayment"`
	ClInsured          sql.NullInt32   `json:"cl_insured"`
	ClFundingAgency    sql.NullString  `json:"cl_funding_agency"`
	ClID               int32           `json:"cl_id"`
}

func (q *Queries) UpdateClientLoan(ctx context.Context, arg UpdateClientLoanParams) error {
	_, err := q.exec(ctx, q.updateClientLoanStmt, updateClientLoan,
		arg.ClClientID,
		arg.ClAmount,
		arg.ClInstallments,
		arg.ClClientProvision,
		arg.ClClientPrepayment,
		arg.ClInsured,
		arg.ClFundingAgency,
		arg.ClID,
	)
	return err
}

const updateCompany = `-- name: UpdateCompany :exec
UPDATE companies SET c_geo_id = ?, c_name = ?, c_rcs = ?, c_siret = ?, c_siren = ?, c_intra_eu_vat = ?, c_legal_status = ?, c_creation_date = ?, c_capital = ?
WHERE c_id = ?
`

type UpdateCompanyParams struct {
	CGeoID        sql.NullInt32  `json:"c_geo_id"`
	CName         sql.NullString `json:"c_name"`
	CRcs          sql.NullString `json:"c_rcs"`
	CSiret        sql.NullString `json:"c_siret"`
	CSiren        sql.NullString `json:"c_siren"`
	CIntraEuVat   sql.NullString `json:"c_intra_eu_vat"`
	CLegalStatus  sql.NullString `json:"c_legal_status"`
	CCreationDate sql.NullString `json:"c_creation_date"`
	CCapital      sql.NullInt32  `json:"c_capital"`
	CID           int32          `json:"c_id"`
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) error {
	_, err := q.exec(ctx, q.updateCompanyStmt, updateCompany,
		arg.CGeoID,
		arg.CName,
		arg.CRcs,
		arg.CSiret,
		arg.CSiren,
		arg.CIntraEuVat,
		arg.CLegalStatus,
		arg.CCreationDate,
		arg.CCapital,
		arg.CID,
	)
	return err
}

const updateEnergiesCost = `-- name: UpdateEnergiesCost :exec
UPDATE energies_costs SET enc_type = ?, enc_date = ?, enc_cost = ? WHERE enc_id = ?
`

type UpdateEnergiesCostParams struct {
	EncType sql.NullString `json:"enc_type"`
	EncDate sql.NullTime   `json:"enc_date"`
	EncCost sql.NullString `json:"enc_cost"`
	EncID   int32          `json:"enc_id"`
}

func (q *Queries) UpdateEnergiesCost(ctx context.Context, arg UpdateEnergiesCostParams) error {
	_, err := q.exec(ctx, q.updateEnergiesCostStmt, updateEnergiesCost,
		arg.EncType,
		arg.EncDate,
		arg.EncCost,
		arg.EncID,
	)
	return err
}

const updateEquipmentCatalogue = `-- name: UpdateEquipmentCatalogue :exec
UPDATE equipments_catalogue SET ec_product_id = ?, ec_quantity = ?, ec_description = ?, ec_date_added = ?, ec_date_updated = ?
WHERE ec_id = ?
`

type UpdateEquipmentCatalogueParams struct {
	EcProductID   sql.NullInt32  `json:"ec_product_id"`
	EcQuantity    sql.NullInt32  `json:"ec_quantity"`
	EcDescription sql.NullString `json:"ec_description"`
	EcDateAdded   sql.NullTime   `json:"ec_date_added"`
	EcDateUpdated sql.NullTime   `json:"ec_date_updated"`
	EcID          int32          `json:"ec_id"`
}

func (q *Queries) UpdateEquipmentCatalogue(ctx context.Context, arg UpdateEquipmentCatalogueParams) error {
	_, err := q.exec(ctx, q.updateEquipmentCatalogueStmt, updateEquipmentCatalogue,
		arg.EcProductID,
		arg.EcQuantity,
		arg.EcDescription,
		arg.EcDateAdded,
		arg.EcDateUpdated,
		arg.EcID,
	)
	return err
}

const updateEquipmentDesignation = `-- name: UpdateEquipmentDesignation :exec
UPDATE equipments_designations SET ea_product_id = ?, ea_article = ?, ea_description = ?, ea_title = ? WHERE ea_id = ?
`

type UpdateEquipmentDesignationParams struct {
	EaProductID   sql.NullInt32  `json:"ea_product_id"`
	EaArticle     sql.NullString `json:"ea_article"`
	EaDescription sql.NullString `json:"ea_description"`
	EaTitle       sql.NullString `json:"ea_title"`
	EaID          int32          `json:"ea_id"`
}

func (q *Queries) UpdateEquipmentDesignation(ctx context.Context, arg UpdateEquipmentDesignationParams) error {
	_, err := q.exec(ctx, q.updateEquipmentDesignationStmt, updateEquipmentDesignation,
		arg.EaProductID,
		arg.EaArticle,
		arg.EaDescription,
		arg.EaTitle,
		arg.EaID,
	)
	return err
}

const updateEquipmentInstaller = `-- name: UpdateEquipmentInstaller :exec
UPDATE equipments_installers SET ei_product_id = ?, ei_company_id = ?
WHERE ei_id = ?
`

type UpdateEquipmentInstallerParams struct {
	EiProductID sql.NullInt32 `json:"ei_product_id"`
	EiCompanyID sql.NullInt32 `json:"ei_company_id"`
	EiID        int32         `json:"ei_id"`
}

func (q *Queries) UpdateEquipmentInstaller(ctx context.Context, arg UpdateEquipmentInstallerParams) error {
	_, err := q.exec(ctx, q.updateEquipmentInstallerStmt, updateEquipmentInstaller, arg.EiProductID, arg.EiCompanyID, arg.EiID)
	return err
}

const updateEquipmentProduct = `-- name: UpdateEquipmentProduct :exec
UPDATE equipments_products SET ep_product_id = ?, ep_price = ?, ep_vat = ?, ep_installation_price = ?
WHERE ep_id = ?
`

type UpdateEquipmentProductParams struct {
	EpProductID         sql.NullInt32  `json:"ep_product_id"`
	EpPrice             sql.NullString `json:"ep_price"`
	EpVat               sql.NullString `json:"ep_vat"`
	EpInstallationPrice sql.NullString `json:"ep_installation_price"`
	EpID                int32          `json:"ep_id"`
}

func (q *Queries) UpdateEquipmentProduct(ctx context.Context, arg UpdateEquipmentProductParams) error {
	_, err := q.exec(ctx, q.updateEquipmentProductStmt, updateEquipmentProduct,
		arg.EpProductID,
		arg.EpPrice,
		arg.EpVat,
		arg.EpInstallationPrice,
		arg.EpID,
	)
	return err
}

const updateEquipmentService = `-- name: UpdateEquipmentService :exec
UPDATE equipments_services SET es_description = ?, es_price = ?
WHERE es_id = ?
`

type UpdateEquipmentServiceParams struct {
	EsDescription sql.NullString `json:"es_description"`
	EsPrice       sql.NullString `json:"es_price"`
	EsID          int32          `json:"es_id"`
}

func (q *Queries) UpdateEquipmentService(ctx context.Context, arg UpdateEquipmentServiceParams) error {
	_, err := q.exec(ctx, q.updateEquipmentServiceStmt, updateEquipmentService, arg.EsDescription, arg.EsPrice, arg.EsID)
	return err
}

const updateGeo = `-- name: UpdateGeo :exec
UPDATE geo SET chg_zone = ?, chg_latitude = ?, chg_longitude = ?, chg_altitude = ?, chg_department = ?, chg_city = ? , chg_address = ?, chg_postcode = ?
WHERE chg_id = ?
`

type UpdateGeoParams struct {
	ChgZone       sql.NullString  `json:"chg_zone"`
	ChgLatitude   sql.NullFloat64 `json:"chg_latitude"`
	ChgLongitude  sql.NullFloat64 `json:"chg_longitude"`
	ChgAltitude   sql.NullInt32   `json:"chg_altitude"`
	ChgDepartment sql.NullInt32   `json:"chg_department"`
	ChgCity       sql.NullString  `json:"chg_city"`
	ChgAddress    sql.NullString  `json:"chg_address"`
	ChgPostcode   sql.NullInt32   `json:"chg_postcode"`
	ChgID         int32           `json:"chg_id"`
}

func (q *Queries) UpdateGeo(ctx context.Context, arg UpdateGeoParams) error {
	_, err := q.exec(ctx, q.updateGeoStmt, updateGeo,
		arg.ChgZone,
		arg.ChgLatitude,
		arg.ChgLongitude,
		arg.ChgAltitude,
		arg.ChgDepartment,
		arg.ChgCity,
		arg.ChgAddress,
		arg.ChgPostcode,
		arg.ChgID,
	)
	return err
}

const updateGroup = `-- name: UpdateGroup :exec
UPDATE ` + "`" + `groups` + "`" + ` SET g_name = ?, g_description = ?
WHERE g_id = ?
`

type UpdateGroupParams struct {
	GName        sql.NullString `json:"g_name"`
	GDescription sql.NullString `json:"g_description"`
	GID          int32          `json:"g_id"`
}

func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) error {
	_, err := q.exec(ctx, q.updateGroupStmt, updateGroup, arg.GName, arg.GDescription, arg.GID)
	return err
}

const updateGroupPrivilege = `-- name: UpdateGroupPrivilege :exec
UPDATE groups_privileges SET gp_privilege = ? 
WHERE gp_privilege_id = ?
`

type UpdateGroupPrivilegeParams struct {
	GpPrivilege   sql.NullString `json:"gp_privilege"`
	GpPrivilegeID int32          `json:"gp_privilege_id"`
}

func (q *Queries) UpdateGroupPrivilege(ctx context.Context, arg UpdateGroupPrivilegeParams) error {
	_, err := q.exec(ctx, q.updateGroupPrivilegeStmt, updateGroupPrivilege, arg.GpPrivilege, arg.GpPrivilegeID)
	return err
}

const updateGroupPrivilegeLnk = `-- name: UpdateGroupPrivilegeLnk :exec
UPDATE groups_privileges_lnk SET gpl_group_id = ? , gpl_privilege_id = ?
WHERE gpl_id = ?
`

type UpdateGroupPrivilegeLnkParams struct {
	GplGroupID     sql.NullInt32 `json:"gpl_group_id"`
	GplPrivilegeID sql.NullInt32 `json:"gpl_privilege_id"`
	GplID          int32         `json:"gpl_id"`
}

func (q *Queries) UpdateGroupPrivilegeLnk(ctx context.Context, arg UpdateGroupPrivilegeLnkParams) error {
	_, err := q.exec(ctx, q.updateGroupPrivilegeLnkStmt, updateGroupPrivilegeLnk, arg.GplGroupID, arg.GplPrivilegeID, arg.GplID)
	return err
}

const updateGroupUserLnk = `-- name: UpdateGroupUserLnk :exec
UPDATE groups_users_lnk SET gu_group_id = ? , gu_user_id = ?
WHERE gu_id = ?
`

type UpdateGroupUserLnkParams struct {
	GuGroupID sql.NullInt32 `json:"gu_group_id"`
	GuUserID  sql.NullInt32 `json:"gu_user_id"`
	GuID      int32         `json:"gu_id"`
}

func (q *Queries) UpdateGroupUserLnk(ctx context.Context, arg UpdateGroupUserLnkParams) error {
	_, err := q.exec(ctx, q.updateGroupUserLnkStmt, updateGroupUserLnk, arg.GuGroupID, arg.GuUserID, arg.GuID)
	return err
}

const updateLog = `-- name: UpdateLog :exec
UPDATE logs SET log_event_desc = ?, log_event_code = ?, log_event_date = ?
WHERE log_id = ?
`

type UpdateLogParams struct {
	LogEventDesc sql.NullString `json:"log_event_desc"`
	LogEventCode sql.NullString `json:"log_event_code"`
	LogEventDate sql.NullTime   `json:"log_event_date"`
	LogID        int32          `json:"log_id"`
}

func (q *Queries) UpdateLog(ctx context.Context, arg UpdateLogParams) error {
	_, err := q.exec(ctx, q.updateLogStmt, updateLog,
		arg.LogEventDesc,
		arg.LogEventCode,
		arg.LogEventDate,
		arg.LogID,
	)
	return err
}

const updateSalesCommission = `-- name: UpdateSalesCommission :exec
UPDATE sales_commissions SET sc_commissions_discount_id = ? , sc_group_id = ?
WHERE sc_id = ?
`

type UpdateSalesCommissionParams struct {
	ScCommissionsDiscountID sql.NullInt32 `json:"sc_commissions_discount_id"`
	ScGroupID               sql.NullInt32 `json:"sc_group_id"`
	ScID                    int32         `json:"sc_id"`
}

func (q *Queries) UpdateSalesCommission(ctx context.Context, arg UpdateSalesCommissionParams) error {
	_, err := q.exec(ctx, q.updateSalesCommissionStmt, updateSalesCommission, arg.ScCommissionsDiscountID, arg.ScGroupID, arg.ScID)
	return err
}

const updateSalesCommissionDiscount = `-- name: UpdateSalesCommissionDiscount :exec
UPDATE sales_commissions_discount SET sc_discount_pct = ? , sc_com_pct = ?  
WHERE sc_id = ?
`

type UpdateSalesCommissionDiscountParams struct {
	ScDiscountPct sql.NullFloat64 `json:"sc_discount_pct"`
	ScComPct      sql.NullFloat64 `json:"sc_com_pct"`
	ScID          int32           `json:"sc_id"`
}

func (q *Queries) UpdateSalesCommissionDiscount(ctx context.Context, arg UpdateSalesCommissionDiscountParams) error {
	_, err := q.exec(ctx, q.updateSalesCommissionDiscountStmt, updateSalesCommissionDiscount, arg.ScDiscountPct, arg.ScComPct, arg.ScID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET user_firstname = ?, user_lastname = ?, user_email = ?, user_phone = ?, user_is_active = ? , user_date_created = ?, user_recruitment_date = ? WHERE user_id = ?
`

type UpdateUserParams struct {
	UserFirstname       sql.NullString `json:"user_firstname"`
	UserLastname        sql.NullString `json:"user_lastname"`
	UserEmail           sql.NullString `json:"user_email"`
	UserPhone           sql.NullString `json:"user_phone"`
	UserIsActive        sql.NullBool   `json:"user_is_active"`
	UserDateCreated     time.Time      `json:"user_date_created"`
	UserRecruitmentDate sql.NullTime   `json:"user_recruitment_date"`
	UserID              int32          `json:"user_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.exec(ctx, q.updateUserStmt, updateUser,
		arg.UserFirstname,
		arg.UserLastname,
		arg.UserEmail,
		arg.UserPhone,
		arg.UserIsActive,
		arg.UserDateCreated,
		arg.UserRecruitmentDate,
		arg.UserID,
	)
	return err
}
