// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package mysql

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createCategoryStmt, err = db.PrepareContext(ctx, createCategory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCategory: %w", err)
	}
	if q.createClientStmt, err = db.PrepareContext(ctx, createClient); err != nil {
		return nil, fmt.Errorf("error preparing query CreateClient: %w", err)
	}
	if q.createClientAssStmt, err = db.PrepareContext(ctx, createClientAss); err != nil {
		return nil, fmt.Errorf("error preparing query CreateClientAss: %w", err)
	}
	if q.createClientHomeStmt, err = db.PrepareContext(ctx, createClientHome); err != nil {
		return nil, fmt.Errorf("error preparing query CreateClientHome: %w", err)
	}
	if q.createClientHomeBillStmt, err = db.PrepareContext(ctx, createClientHomeBill); err != nil {
		return nil, fmt.Errorf("error preparing query CreateClientHomeBill: %w", err)
	}
	if q.createClientHomeEquipmentStmt, err = db.PrepareContext(ctx, createClientHomeEquipment); err != nil {
		return nil, fmt.Errorf("error preparing query CreateClientHomeEquipment: %w", err)
	}
	if q.createClientInstallationStmt, err = db.PrepareContext(ctx, createClientInstallation); err != nil {
		return nil, fmt.Errorf("error preparing query CreateClientInstallation: %w", err)
	}
	if q.createClientInstallationFileStmt, err = db.PrepareContext(ctx, createClientInstallationFile); err != nil {
		return nil, fmt.Errorf("error preparing query CreateClientInstallationFile: %w", err)
	}
	if q.createClientInstallationPaymentStmt, err = db.PrepareContext(ctx, createClientInstallationPayment); err != nil {
		return nil, fmt.Errorf("error preparing query CreateClientInstallationPayment: %w", err)
	}
	if q.createClientInstallationProductStmt, err = db.PrepareContext(ctx, createClientInstallationProduct); err != nil {
		return nil, fmt.Errorf("error preparing query CreateClientInstallationProduct: %w", err)
	}
	if q.createClientLoanStmt, err = db.PrepareContext(ctx, createClientLoan); err != nil {
		return nil, fmt.Errorf("error preparing query CreateClientLoan: %w", err)
	}
	if q.createCompanyStmt, err = db.PrepareContext(ctx, createCompany); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCompany: %w", err)
	}
	if q.createEnergiesCostStmt, err = db.PrepareContext(ctx, createEnergiesCost); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEnergiesCost: %w", err)
	}
	if q.createEquipmentCatalogueStmt, err = db.PrepareContext(ctx, createEquipmentCatalogue); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEquipmentCatalogue: %w", err)
	}
	if q.createEquipmentDesignationsStmt, err = db.PrepareContext(ctx, createEquipmentDesignations); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEquipmentDesignations: %w", err)
	}
	if q.createEquipmentInstallerStmt, err = db.PrepareContext(ctx, createEquipmentInstaller); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEquipmentInstaller: %w", err)
	}
	if q.createEquipmentProductStmt, err = db.PrepareContext(ctx, createEquipmentProduct); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEquipmentProduct: %w", err)
	}
	if q.createEquipmentServicesStmt, err = db.PrepareContext(ctx, createEquipmentServices); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEquipmentServices: %w", err)
	}
	if q.createGeoStmt, err = db.PrepareContext(ctx, createGeo); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGeo: %w", err)
	}
	if q.createGroupStmt, err = db.PrepareContext(ctx, createGroup); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGroup: %w", err)
	}
	if q.createGroupPrivilegeStmt, err = db.PrepareContext(ctx, createGroupPrivilege); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGroupPrivilege: %w", err)
	}
	if q.createGroupPrivilegeLnkStmt, err = db.PrepareContext(ctx, createGroupPrivilegeLnk); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGroupPrivilegeLnk: %w", err)
	}
	if q.createGroupUserLnkStmt, err = db.PrepareContext(ctx, createGroupUserLnk); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGroupUserLnk: %w", err)
	}
	if q.createGroupUserLnkByGroupNameStmt, err = db.PrepareContext(ctx, createGroupUserLnkByGroupName); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGroupUserLnkByGroupName: %w", err)
	}
	if q.createLogStmt, err = db.PrepareContext(ctx, createLog); err != nil {
		return nil, fmt.Errorf("error preparing query CreateLog: %w", err)
	}
	if q.createSalesCommissionStmt, err = db.PrepareContext(ctx, createSalesCommission); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSalesCommission: %w", err)
	}
	if q.createSalesCommissionDiscountStmt, err = db.PrepareContext(ctx, createSalesCommissionDiscount); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSalesCommissionDiscount: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteCategoryStmt, err = db.PrepareContext(ctx, deleteCategory); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCategory: %w", err)
	}
	if q.deleteClientStmt, err = db.PrepareContext(ctx, deleteClient); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteClient: %w", err)
	}
	if q.deleteClientAssStmt, err = db.PrepareContext(ctx, deleteClientAss); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteClientAss: %w", err)
	}
	if q.deleteClientHomeStmt, err = db.PrepareContext(ctx, deleteClientHome); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteClientHome: %w", err)
	}
	if q.deleteClientHomeBillStmt, err = db.PrepareContext(ctx, deleteClientHomeBill); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteClientHomeBill: %w", err)
	}
	if q.deleteClientHomeEquipmentStmt, err = db.PrepareContext(ctx, deleteClientHomeEquipment); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteClientHomeEquipment: %w", err)
	}
	if q.deleteClientInstallationStmt, err = db.PrepareContext(ctx, deleteClientInstallation); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteClientInstallation: %w", err)
	}
	if q.deleteClientInstallationFileStmt, err = db.PrepareContext(ctx, deleteClientInstallationFile); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteClientInstallationFile: %w", err)
	}
	if q.deleteClientInstallationPaymentStmt, err = db.PrepareContext(ctx, deleteClientInstallationPayment); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteClientInstallationPayment: %w", err)
	}
	if q.deleteClientInstallationProductStmt, err = db.PrepareContext(ctx, deleteClientInstallationProduct); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteClientInstallationProduct: %w", err)
	}
	if q.deleteClientLoanStmt, err = db.PrepareContext(ctx, deleteClientLoan); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteClientLoan: %w", err)
	}
	if q.deleteCompanyStmt, err = db.PrepareContext(ctx, deleteCompany); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCompany: %w", err)
	}
	if q.deleteEnergiesCostStmt, err = db.PrepareContext(ctx, deleteEnergiesCost); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEnergiesCost: %w", err)
	}
	if q.deleteEquipmentCatalogueStmt, err = db.PrepareContext(ctx, deleteEquipmentCatalogue); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEquipmentCatalogue: %w", err)
	}
	if q.deleteEquipmentDesignationStmt, err = db.PrepareContext(ctx, deleteEquipmentDesignation); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEquipmentDesignation: %w", err)
	}
	if q.deleteEquipmentInstallerStmt, err = db.PrepareContext(ctx, deleteEquipmentInstaller); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEquipmentInstaller: %w", err)
	}
	if q.deleteEquipmentProductStmt, err = db.PrepareContext(ctx, deleteEquipmentProduct); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEquipmentProduct: %w", err)
	}
	if q.deleteEquipmentServiceStmt, err = db.PrepareContext(ctx, deleteEquipmentService); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEquipmentService: %w", err)
	}
	if q.deleteGeoStmt, err = db.PrepareContext(ctx, deleteGeo); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGeo: %w", err)
	}
	if q.deleteGroupStmt, err = db.PrepareContext(ctx, deleteGroup); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGroup: %w", err)
	}
	if q.deleteGroupPrivilegeStmt, err = db.PrepareContext(ctx, deleteGroupPrivilege); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGroupPrivilege: %w", err)
	}
	if q.deleteGroupPrivilegeLnkStmt, err = db.PrepareContext(ctx, deleteGroupPrivilegeLnk); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGroupPrivilegeLnk: %w", err)
	}
	if q.deleteGroupUserLnkStmt, err = db.PrepareContext(ctx, deleteGroupUserLnk); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGroupUserLnk: %w", err)
	}
	if q.deleteLogStmt, err = db.PrepareContext(ctx, deleteLog); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteLog: %w", err)
	}
	if q.deleteSalesCommissionStmt, err = db.PrepareContext(ctx, deleteSalesCommission); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSalesCommission: %w", err)
	}
	if q.deleteSalesCommissionDiscountStmt, err = db.PrepareContext(ctx, deleteSalesCommissionDiscount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSalesCommissionDiscount: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getCategoryStmt, err = db.PrepareContext(ctx, getCategory); err != nil {
		return nil, fmt.Errorf("error preparing query GetCategory: %w", err)
	}
	if q.getClientStmt, err = db.PrepareContext(ctx, getClient); err != nil {
		return nil, fmt.Errorf("error preparing query GetClient: %w", err)
	}
	if q.getClientAssStmt, err = db.PrepareContext(ctx, getClientAss); err != nil {
		return nil, fmt.Errorf("error preparing query GetClientAss: %w", err)
	}
	if q.getClientHomeEquipmentParamsStmt, err = db.PrepareContext(ctx, getClientHomeEquipmentParams); err != nil {
		return nil, fmt.Errorf("error preparing query GetClientHomeEquipmentParams: %w", err)
	}
	if q.getClientHomeParamsStmt, err = db.PrepareContext(ctx, getClientHomeParams); err != nil {
		return nil, fmt.Errorf("error preparing query GetClientHomeParams: %w", err)
	}
	if q.getClientHomeParamsBillStmt, err = db.PrepareContext(ctx, getClientHomeParamsBill); err != nil {
		return nil, fmt.Errorf("error preparing query GetClientHomeParamsBill: %w", err)
	}
	if q.getClientInstallationStmt, err = db.PrepareContext(ctx, getClientInstallation); err != nil {
		return nil, fmt.Errorf("error preparing query GetClientInstallation: %w", err)
	}
	if q.getClientInstallationFileStmt, err = db.PrepareContext(ctx, getClientInstallationFile); err != nil {
		return nil, fmt.Errorf("error preparing query GetClientInstallationFile: %w", err)
	}
	if q.getClientInstallationPaymentStmt, err = db.PrepareContext(ctx, getClientInstallationPayment); err != nil {
		return nil, fmt.Errorf("error preparing query GetClientInstallationPayment: %w", err)
	}
	if q.getClientInstallationProductStmt, err = db.PrepareContext(ctx, getClientInstallationProduct); err != nil {
		return nil, fmt.Errorf("error preparing query GetClientInstallationProduct: %w", err)
	}
	if q.getClientLoanStmt, err = db.PrepareContext(ctx, getClientLoan); err != nil {
		return nil, fmt.Errorf("error preparing query GetClientLoan: %w", err)
	}
	if q.getCompanyStmt, err = db.PrepareContext(ctx, getCompany); err != nil {
		return nil, fmt.Errorf("error preparing query GetCompany: %w", err)
	}
	if q.getEnergiesCostStmt, err = db.PrepareContext(ctx, getEnergiesCost); err != nil {
		return nil, fmt.Errorf("error preparing query GetEnergiesCost: %w", err)
	}
	if q.getEquipmentCatalogueStmt, err = db.PrepareContext(ctx, getEquipmentCatalogue); err != nil {
		return nil, fmt.Errorf("error preparing query GetEquipmentCatalogue: %w", err)
	}
	if q.getEquipmentDesignationStmt, err = db.PrepareContext(ctx, getEquipmentDesignation); err != nil {
		return nil, fmt.Errorf("error preparing query GetEquipmentDesignation: %w", err)
	}
	if q.getEquipmentInstallerStmt, err = db.PrepareContext(ctx, getEquipmentInstaller); err != nil {
		return nil, fmt.Errorf("error preparing query GetEquipmentInstaller: %w", err)
	}
	if q.getEquipmentProductStmt, err = db.PrepareContext(ctx, getEquipmentProduct); err != nil {
		return nil, fmt.Errorf("error preparing query GetEquipmentProduct: %w", err)
	}
	if q.getEquipmentServiceStmt, err = db.PrepareContext(ctx, getEquipmentService); err != nil {
		return nil, fmt.Errorf("error preparing query GetEquipmentService: %w", err)
	}
	if q.getGeoStmt, err = db.PrepareContext(ctx, getGeo); err != nil {
		return nil, fmt.Errorf("error preparing query GetGeo: %w", err)
	}
	if q.getGroupStmt, err = db.PrepareContext(ctx, getGroup); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroup: %w", err)
	}
	if q.getGroupByNameStmt, err = db.PrepareContext(ctx, getGroupByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupByName: %w", err)
	}
	if q.getGroupPrivilegeStmt, err = db.PrepareContext(ctx, getGroupPrivilege); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupPrivilege: %w", err)
	}
	if q.getGroupPrivilegeLnkStmt, err = db.PrepareContext(ctx, getGroupPrivilegeLnk); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupPrivilegeLnk: %w", err)
	}
	if q.getGroupPrivilegesByUserIdStmt, err = db.PrepareContext(ctx, getGroupPrivilegesByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupPrivilegesByUserId: %w", err)
	}
	if q.getGroupUserLnkStmt, err = db.PrepareContext(ctx, getGroupUserLnk); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupUserLnk: %w", err)
	}
	if q.getLogStmt, err = db.PrepareContext(ctx, getLog); err != nil {
		return nil, fmt.Errorf("error preparing query GetLog: %w", err)
	}
	if q.getSalesCommissionStmt, err = db.PrepareContext(ctx, getSalesCommission); err != nil {
		return nil, fmt.Errorf("error preparing query GetSalesCommission: %w", err)
	}
	if q.getSalesCommissionDiscountStmt, err = db.PrepareContext(ctx, getSalesCommissionDiscount); err != nil {
		return nil, fmt.Errorf("error preparing query GetSalesCommissionDiscount: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.listCategoriesStmt, err = db.PrepareContext(ctx, listCategories); err != nil {
		return nil, fmt.Errorf("error preparing query ListCategories: %w", err)
	}
	if q.listClientInstallationProductsStmt, err = db.PrepareContext(ctx, listClientInstallationProducts); err != nil {
		return nil, fmt.Errorf("error preparing query ListClientInstallationProducts: %w", err)
	}
	if q.listClientsStmt, err = db.PrepareContext(ctx, listClients); err != nil {
		return nil, fmt.Errorf("error preparing query ListClients: %w", err)
	}
	if q.listClientsAssStmt, err = db.PrepareContext(ctx, listClientsAss); err != nil {
		return nil, fmt.Errorf("error preparing query ListClientsAss: %w", err)
	}
	if q.listClientsByUserStmt, err = db.PrepareContext(ctx, listClientsByUser); err != nil {
		return nil, fmt.Errorf("error preparing query ListClientsByUser: %w", err)
	}
	if q.listClientsHomesStmt, err = db.PrepareContext(ctx, listClientsHomes); err != nil {
		return nil, fmt.Errorf("error preparing query ListClientsHomes: %w", err)
	}
	if q.listClientsHomesBillsStmt, err = db.PrepareContext(ctx, listClientsHomesBills); err != nil {
		return nil, fmt.Errorf("error preparing query ListClientsHomesBills: %w", err)
	}
	if q.listClientsHomesEquipmentsStmt, err = db.PrepareContext(ctx, listClientsHomesEquipments); err != nil {
		return nil, fmt.Errorf("error preparing query ListClientsHomesEquipments: %w", err)
	}
	if q.listClientsIdByUserStmt, err = db.PrepareContext(ctx, listClientsIdByUser); err != nil {
		return nil, fmt.Errorf("error preparing query ListClientsIdByUser: %w", err)
	}
	if q.listClientsInstallationStmt, err = db.PrepareContext(ctx, listClientsInstallation); err != nil {
		return nil, fmt.Errorf("error preparing query ListClientsInstallation: %w", err)
	}
	if q.listClientsInstallationFilesStmt, err = db.PrepareContext(ctx, listClientsInstallationFiles); err != nil {
		return nil, fmt.Errorf("error preparing query ListClientsInstallationFiles: %w", err)
	}
	if q.listClientsInstallationsPaymentsStmt, err = db.PrepareContext(ctx, listClientsInstallationsPayments); err != nil {
		return nil, fmt.Errorf("error preparing query ListClientsInstallationsPayments: %w", err)
	}
	if q.listClientsLoansStmt, err = db.PrepareContext(ctx, listClientsLoans); err != nil {
		return nil, fmt.Errorf("error preparing query ListClientsLoans: %w", err)
	}
	if q.listCompaniesStmt, err = db.PrepareContext(ctx, listCompanies); err != nil {
		return nil, fmt.Errorf("error preparing query ListCompanies: %w", err)
	}
	if q.listEnergiesCostsStmt, err = db.PrepareContext(ctx, listEnergiesCosts); err != nil {
		return nil, fmt.Errorf("error preparing query ListEnergiesCosts: %w", err)
	}
	if q.listEquipmentCatalogueStmt, err = db.PrepareContext(ctx, listEquipmentCatalogue); err != nil {
		return nil, fmt.Errorf("error preparing query ListEquipmentCatalogue: %w", err)
	}
	if q.listEquipmentDesignationsStmt, err = db.PrepareContext(ctx, listEquipmentDesignations); err != nil {
		return nil, fmt.Errorf("error preparing query ListEquipmentDesignations: %w", err)
	}
	if q.listEquipmentInstallersStmt, err = db.PrepareContext(ctx, listEquipmentInstallers); err != nil {
		return nil, fmt.Errorf("error preparing query ListEquipmentInstallers: %w", err)
	}
	if q.listEquipmentProductsStmt, err = db.PrepareContext(ctx, listEquipmentProducts); err != nil {
		return nil, fmt.Errorf("error preparing query ListEquipmentProducts: %w", err)
	}
	if q.listEquipmentServicesStmt, err = db.PrepareContext(ctx, listEquipmentServices); err != nil {
		return nil, fmt.Errorf("error preparing query ListEquipmentServices: %w", err)
	}
	if q.listGeoStmt, err = db.PrepareContext(ctx, listGeo); err != nil {
		return nil, fmt.Errorf("error preparing query ListGeo: %w", err)
	}
	if q.listGroupPrivilegesLnkStmt, err = db.PrepareContext(ctx, listGroupPrivilegesLnk); err != nil {
		return nil, fmt.Errorf("error preparing query ListGroupPrivilegesLnk: %w", err)
	}
	if q.listGroupsStmt, err = db.PrepareContext(ctx, listGroups); err != nil {
		return nil, fmt.Errorf("error preparing query ListGroups: %w", err)
	}
	if q.listGroupsByUserStmt, err = db.PrepareContext(ctx, listGroupsByUser); err != nil {
		return nil, fmt.Errorf("error preparing query ListGroupsByUser: %w", err)
	}
	if q.listGroupsPrivilegesStmt, err = db.PrepareContext(ctx, listGroupsPrivileges); err != nil {
		return nil, fmt.Errorf("error preparing query ListGroupsPrivileges: %w", err)
	}
	if q.listGroupsUsersLnkStmt, err = db.PrepareContext(ctx, listGroupsUsersLnk); err != nil {
		return nil, fmt.Errorf("error preparing query ListGroupsUsersLnk: %w", err)
	}
	if q.listLogsStmt, err = db.PrepareContext(ctx, listLogs); err != nil {
		return nil, fmt.Errorf("error preparing query ListLogs: %w", err)
	}
	if q.listSalesCommissionsStmt, err = db.PrepareContext(ctx, listSalesCommissions); err != nil {
		return nil, fmt.Errorf("error preparing query ListSalesCommissions: %w", err)
	}
	if q.listSalesCommissionsDiscountsStmt, err = db.PrepareContext(ctx, listSalesCommissionsDiscounts); err != nil {
		return nil, fmt.Errorf("error preparing query ListSalesCommissionsDiscounts: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.updateCategoryStmt, err = db.PrepareContext(ctx, updateCategory); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCategory: %w", err)
	}
	if q.updateClientStmt, err = db.PrepareContext(ctx, updateClient); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateClient: %w", err)
	}
	if q.updateClientAssStmt, err = db.PrepareContext(ctx, updateClientAss); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateClientAss: %w", err)
	}
	if q.updateClientHomeStmt, err = db.PrepareContext(ctx, updateClientHome); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateClientHome: %w", err)
	}
	if q.updateClientHomeBillStmt, err = db.PrepareContext(ctx, updateClientHomeBill); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateClientHomeBill: %w", err)
	}
	if q.updateClientHomeEquipmentStmt, err = db.PrepareContext(ctx, updateClientHomeEquipment); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateClientHomeEquipment: %w", err)
	}
	if q.updateClientInstallationStmt, err = db.PrepareContext(ctx, updateClientInstallation); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateClientInstallation: %w", err)
	}
	if q.updateClientInstallationFileStmt, err = db.PrepareContext(ctx, updateClientInstallationFile); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateClientInstallationFile: %w", err)
	}
	if q.updateClientInstallationPaymentStmt, err = db.PrepareContext(ctx, updateClientInstallationPayment); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateClientInstallationPayment: %w", err)
	}
	if q.updateClientInstallationProductStmt, err = db.PrepareContext(ctx, updateClientInstallationProduct); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateClientInstallationProduct: %w", err)
	}
	if q.updateClientLoanStmt, err = db.PrepareContext(ctx, updateClientLoan); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateClientLoan: %w", err)
	}
	if q.updateCompanyStmt, err = db.PrepareContext(ctx, updateCompany); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCompany: %w", err)
	}
	if q.updateEnergiesCostStmt, err = db.PrepareContext(ctx, updateEnergiesCost); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEnergiesCost: %w", err)
	}
	if q.updateEquipmentCatalogueStmt, err = db.PrepareContext(ctx, updateEquipmentCatalogue); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEquipmentCatalogue: %w", err)
	}
	if q.updateEquipmentDesignationStmt, err = db.PrepareContext(ctx, updateEquipmentDesignation); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEquipmentDesignation: %w", err)
	}
	if q.updateEquipmentInstallerStmt, err = db.PrepareContext(ctx, updateEquipmentInstaller); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEquipmentInstaller: %w", err)
	}
	if q.updateEquipmentProductStmt, err = db.PrepareContext(ctx, updateEquipmentProduct); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEquipmentProduct: %w", err)
	}
	if q.updateEquipmentServiceStmt, err = db.PrepareContext(ctx, updateEquipmentService); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEquipmentService: %w", err)
	}
	if q.updateGeoStmt, err = db.PrepareContext(ctx, updateGeo); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGeo: %w", err)
	}
	if q.updateGroupStmt, err = db.PrepareContext(ctx, updateGroup); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGroup: %w", err)
	}
	if q.updateGroupPrivilegeStmt, err = db.PrepareContext(ctx, updateGroupPrivilege); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGroupPrivilege: %w", err)
	}
	if q.updateGroupPrivilegeLnkStmt, err = db.PrepareContext(ctx, updateGroupPrivilegeLnk); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGroupPrivilegeLnk: %w", err)
	}
	if q.updateGroupUserLnkStmt, err = db.PrepareContext(ctx, updateGroupUserLnk); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGroupUserLnk: %w", err)
	}
	if q.updateLogStmt, err = db.PrepareContext(ctx, updateLog); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateLog: %w", err)
	}
	if q.updateSalesCommissionStmt, err = db.PrepareContext(ctx, updateSalesCommission); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSalesCommission: %w", err)
	}
	if q.updateSalesCommissionDiscountStmt, err = db.PrepareContext(ctx, updateSalesCommissionDiscount); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSalesCommissionDiscount: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createCategoryStmt != nil {
		if cerr := q.createCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCategoryStmt: %w", cerr)
		}
	}
	if q.createClientStmt != nil {
		if cerr := q.createClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createClientStmt: %w", cerr)
		}
	}
	if q.createClientAssStmt != nil {
		if cerr := q.createClientAssStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createClientAssStmt: %w", cerr)
		}
	}
	if q.createClientHomeStmt != nil {
		if cerr := q.createClientHomeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createClientHomeStmt: %w", cerr)
		}
	}
	if q.createClientHomeBillStmt != nil {
		if cerr := q.createClientHomeBillStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createClientHomeBillStmt: %w", cerr)
		}
	}
	if q.createClientHomeEquipmentStmt != nil {
		if cerr := q.createClientHomeEquipmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createClientHomeEquipmentStmt: %w", cerr)
		}
	}
	if q.createClientInstallationStmt != nil {
		if cerr := q.createClientInstallationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createClientInstallationStmt: %w", cerr)
		}
	}
	if q.createClientInstallationFileStmt != nil {
		if cerr := q.createClientInstallationFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createClientInstallationFileStmt: %w", cerr)
		}
	}
	if q.createClientInstallationPaymentStmt != nil {
		if cerr := q.createClientInstallationPaymentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createClientInstallationPaymentStmt: %w", cerr)
		}
	}
	if q.createClientInstallationProductStmt != nil {
		if cerr := q.createClientInstallationProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createClientInstallationProductStmt: %w", cerr)
		}
	}
	if q.createClientLoanStmt != nil {
		if cerr := q.createClientLoanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createClientLoanStmt: %w", cerr)
		}
	}
	if q.createCompanyStmt != nil {
		if cerr := q.createCompanyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCompanyStmt: %w", cerr)
		}
	}
	if q.createEnergiesCostStmt != nil {
		if cerr := q.createEnergiesCostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEnergiesCostStmt: %w", cerr)
		}
	}
	if q.createEquipmentCatalogueStmt != nil {
		if cerr := q.createEquipmentCatalogueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEquipmentCatalogueStmt: %w", cerr)
		}
	}
	if q.createEquipmentDesignationsStmt != nil {
		if cerr := q.createEquipmentDesignationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEquipmentDesignationsStmt: %w", cerr)
		}
	}
	if q.createEquipmentInstallerStmt != nil {
		if cerr := q.createEquipmentInstallerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEquipmentInstallerStmt: %w", cerr)
		}
	}
	if q.createEquipmentProductStmt != nil {
		if cerr := q.createEquipmentProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEquipmentProductStmt: %w", cerr)
		}
	}
	if q.createEquipmentServicesStmt != nil {
		if cerr := q.createEquipmentServicesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEquipmentServicesStmt: %w", cerr)
		}
	}
	if q.createGeoStmt != nil {
		if cerr := q.createGeoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGeoStmt: %w", cerr)
		}
	}
	if q.createGroupStmt != nil {
		if cerr := q.createGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGroupStmt: %w", cerr)
		}
	}
	if q.createGroupPrivilegeStmt != nil {
		if cerr := q.createGroupPrivilegeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGroupPrivilegeStmt: %w", cerr)
		}
	}
	if q.createGroupPrivilegeLnkStmt != nil {
		if cerr := q.createGroupPrivilegeLnkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGroupPrivilegeLnkStmt: %w", cerr)
		}
	}
	if q.createGroupUserLnkStmt != nil {
		if cerr := q.createGroupUserLnkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGroupUserLnkStmt: %w", cerr)
		}
	}
	if q.createGroupUserLnkByGroupNameStmt != nil {
		if cerr := q.createGroupUserLnkByGroupNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGroupUserLnkByGroupNameStmt: %w", cerr)
		}
	}
	if q.createLogStmt != nil {
		if cerr := q.createLogStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createLogStmt: %w", cerr)
		}
	}
	if q.createSalesCommissionStmt != nil {
		if cerr := q.createSalesCommissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSalesCommissionStmt: %w", cerr)
		}
	}
	if q.createSalesCommissionDiscountStmt != nil {
		if cerr := q.createSalesCommissionDiscountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSalesCommissionDiscountStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteCategoryStmt != nil {
		if cerr := q.deleteCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCategoryStmt: %w", cerr)
		}
	}
	if q.deleteClientStmt != nil {
		if cerr := q.deleteClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteClientStmt: %w", cerr)
		}
	}
	if q.deleteClientAssStmt != nil {
		if cerr := q.deleteClientAssStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteClientAssStmt: %w", cerr)
		}
	}
	if q.deleteClientHomeStmt != nil {
		if cerr := q.deleteClientHomeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteClientHomeStmt: %w", cerr)
		}
	}
	if q.deleteClientHomeBillStmt != nil {
		if cerr := q.deleteClientHomeBillStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteClientHomeBillStmt: %w", cerr)
		}
	}
	if q.deleteClientHomeEquipmentStmt != nil {
		if cerr := q.deleteClientHomeEquipmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteClientHomeEquipmentStmt: %w", cerr)
		}
	}
	if q.deleteClientInstallationStmt != nil {
		if cerr := q.deleteClientInstallationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteClientInstallationStmt: %w", cerr)
		}
	}
	if q.deleteClientInstallationFileStmt != nil {
		if cerr := q.deleteClientInstallationFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteClientInstallationFileStmt: %w", cerr)
		}
	}
	if q.deleteClientInstallationPaymentStmt != nil {
		if cerr := q.deleteClientInstallationPaymentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteClientInstallationPaymentStmt: %w", cerr)
		}
	}
	if q.deleteClientInstallationProductStmt != nil {
		if cerr := q.deleteClientInstallationProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteClientInstallationProductStmt: %w", cerr)
		}
	}
	if q.deleteClientLoanStmt != nil {
		if cerr := q.deleteClientLoanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteClientLoanStmt: %w", cerr)
		}
	}
	if q.deleteCompanyStmt != nil {
		if cerr := q.deleteCompanyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCompanyStmt: %w", cerr)
		}
	}
	if q.deleteEnergiesCostStmt != nil {
		if cerr := q.deleteEnergiesCostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEnergiesCostStmt: %w", cerr)
		}
	}
	if q.deleteEquipmentCatalogueStmt != nil {
		if cerr := q.deleteEquipmentCatalogueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEquipmentCatalogueStmt: %w", cerr)
		}
	}
	if q.deleteEquipmentDesignationStmt != nil {
		if cerr := q.deleteEquipmentDesignationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEquipmentDesignationStmt: %w", cerr)
		}
	}
	if q.deleteEquipmentInstallerStmt != nil {
		if cerr := q.deleteEquipmentInstallerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEquipmentInstallerStmt: %w", cerr)
		}
	}
	if q.deleteEquipmentProductStmt != nil {
		if cerr := q.deleteEquipmentProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEquipmentProductStmt: %w", cerr)
		}
	}
	if q.deleteEquipmentServiceStmt != nil {
		if cerr := q.deleteEquipmentServiceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEquipmentServiceStmt: %w", cerr)
		}
	}
	if q.deleteGeoStmt != nil {
		if cerr := q.deleteGeoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGeoStmt: %w", cerr)
		}
	}
	if q.deleteGroupStmt != nil {
		if cerr := q.deleteGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGroupStmt: %w", cerr)
		}
	}
	if q.deleteGroupPrivilegeStmt != nil {
		if cerr := q.deleteGroupPrivilegeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGroupPrivilegeStmt: %w", cerr)
		}
	}
	if q.deleteGroupPrivilegeLnkStmt != nil {
		if cerr := q.deleteGroupPrivilegeLnkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGroupPrivilegeLnkStmt: %w", cerr)
		}
	}
	if q.deleteGroupUserLnkStmt != nil {
		if cerr := q.deleteGroupUserLnkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGroupUserLnkStmt: %w", cerr)
		}
	}
	if q.deleteLogStmt != nil {
		if cerr := q.deleteLogStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteLogStmt: %w", cerr)
		}
	}
	if q.deleteSalesCommissionStmt != nil {
		if cerr := q.deleteSalesCommissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSalesCommissionStmt: %w", cerr)
		}
	}
	if q.deleteSalesCommissionDiscountStmt != nil {
		if cerr := q.deleteSalesCommissionDiscountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSalesCommissionDiscountStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getCategoryStmt != nil {
		if cerr := q.getCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCategoryStmt: %w", cerr)
		}
	}
	if q.getClientStmt != nil {
		if cerr := q.getClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClientStmt: %w", cerr)
		}
	}
	if q.getClientAssStmt != nil {
		if cerr := q.getClientAssStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClientAssStmt: %w", cerr)
		}
	}
	if q.getClientHomeEquipmentParamsStmt != nil {
		if cerr := q.getClientHomeEquipmentParamsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClientHomeEquipmentParamsStmt: %w", cerr)
		}
	}
	if q.getClientHomeParamsStmt != nil {
		if cerr := q.getClientHomeParamsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClientHomeParamsStmt: %w", cerr)
		}
	}
	if q.getClientHomeParamsBillStmt != nil {
		if cerr := q.getClientHomeParamsBillStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClientHomeParamsBillStmt: %w", cerr)
		}
	}
	if q.getClientInstallationStmt != nil {
		if cerr := q.getClientInstallationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClientInstallationStmt: %w", cerr)
		}
	}
	if q.getClientInstallationFileStmt != nil {
		if cerr := q.getClientInstallationFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClientInstallationFileStmt: %w", cerr)
		}
	}
	if q.getClientInstallationPaymentStmt != nil {
		if cerr := q.getClientInstallationPaymentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClientInstallationPaymentStmt: %w", cerr)
		}
	}
	if q.getClientInstallationProductStmt != nil {
		if cerr := q.getClientInstallationProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClientInstallationProductStmt: %w", cerr)
		}
	}
	if q.getClientLoanStmt != nil {
		if cerr := q.getClientLoanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClientLoanStmt: %w", cerr)
		}
	}
	if q.getCompanyStmt != nil {
		if cerr := q.getCompanyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCompanyStmt: %w", cerr)
		}
	}
	if q.getEnergiesCostStmt != nil {
		if cerr := q.getEnergiesCostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEnergiesCostStmt: %w", cerr)
		}
	}
	if q.getEquipmentCatalogueStmt != nil {
		if cerr := q.getEquipmentCatalogueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEquipmentCatalogueStmt: %w", cerr)
		}
	}
	if q.getEquipmentDesignationStmt != nil {
		if cerr := q.getEquipmentDesignationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEquipmentDesignationStmt: %w", cerr)
		}
	}
	if q.getEquipmentInstallerStmt != nil {
		if cerr := q.getEquipmentInstallerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEquipmentInstallerStmt: %w", cerr)
		}
	}
	if q.getEquipmentProductStmt != nil {
		if cerr := q.getEquipmentProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEquipmentProductStmt: %w", cerr)
		}
	}
	if q.getEquipmentServiceStmt != nil {
		if cerr := q.getEquipmentServiceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEquipmentServiceStmt: %w", cerr)
		}
	}
	if q.getGeoStmt != nil {
		if cerr := q.getGeoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGeoStmt: %w", cerr)
		}
	}
	if q.getGroupStmt != nil {
		if cerr := q.getGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupStmt: %w", cerr)
		}
	}
	if q.getGroupByNameStmt != nil {
		if cerr := q.getGroupByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupByNameStmt: %w", cerr)
		}
	}
	if q.getGroupPrivilegeStmt != nil {
		if cerr := q.getGroupPrivilegeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupPrivilegeStmt: %w", cerr)
		}
	}
	if q.getGroupPrivilegeLnkStmt != nil {
		if cerr := q.getGroupPrivilegeLnkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupPrivilegeLnkStmt: %w", cerr)
		}
	}
	if q.getGroupPrivilegesByUserIdStmt != nil {
		if cerr := q.getGroupPrivilegesByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupPrivilegesByUserIdStmt: %w", cerr)
		}
	}
	if q.getGroupUserLnkStmt != nil {
		if cerr := q.getGroupUserLnkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupUserLnkStmt: %w", cerr)
		}
	}
	if q.getLogStmt != nil {
		if cerr := q.getLogStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLogStmt: %w", cerr)
		}
	}
	if q.getSalesCommissionStmt != nil {
		if cerr := q.getSalesCommissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSalesCommissionStmt: %w", cerr)
		}
	}
	if q.getSalesCommissionDiscountStmt != nil {
		if cerr := q.getSalesCommissionDiscountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSalesCommissionDiscountStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.listCategoriesStmt != nil {
		if cerr := q.listCategoriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCategoriesStmt: %w", cerr)
		}
	}
	if q.listClientInstallationProductsStmt != nil {
		if cerr := q.listClientInstallationProductsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listClientInstallationProductsStmt: %w", cerr)
		}
	}
	if q.listClientsStmt != nil {
		if cerr := q.listClientsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listClientsStmt: %w", cerr)
		}
	}
	if q.listClientsAssStmt != nil {
		if cerr := q.listClientsAssStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listClientsAssStmt: %w", cerr)
		}
	}
	if q.listClientsByUserStmt != nil {
		if cerr := q.listClientsByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listClientsByUserStmt: %w", cerr)
		}
	}
	if q.listClientsHomesStmt != nil {
		if cerr := q.listClientsHomesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listClientsHomesStmt: %w", cerr)
		}
	}
	if q.listClientsHomesBillsStmt != nil {
		if cerr := q.listClientsHomesBillsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listClientsHomesBillsStmt: %w", cerr)
		}
	}
	if q.listClientsHomesEquipmentsStmt != nil {
		if cerr := q.listClientsHomesEquipmentsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listClientsHomesEquipmentsStmt: %w", cerr)
		}
	}
	if q.listClientsIdByUserStmt != nil {
		if cerr := q.listClientsIdByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listClientsIdByUserStmt: %w", cerr)
		}
	}
	if q.listClientsInstallationStmt != nil {
		if cerr := q.listClientsInstallationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listClientsInstallationStmt: %w", cerr)
		}
	}
	if q.listClientsInstallationFilesStmt != nil {
		if cerr := q.listClientsInstallationFilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listClientsInstallationFilesStmt: %w", cerr)
		}
	}
	if q.listClientsInstallationsPaymentsStmt != nil {
		if cerr := q.listClientsInstallationsPaymentsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listClientsInstallationsPaymentsStmt: %w", cerr)
		}
	}
	if q.listClientsLoansStmt != nil {
		if cerr := q.listClientsLoansStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listClientsLoansStmt: %w", cerr)
		}
	}
	if q.listCompaniesStmt != nil {
		if cerr := q.listCompaniesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCompaniesStmt: %w", cerr)
		}
	}
	if q.listEnergiesCostsStmt != nil {
		if cerr := q.listEnergiesCostsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEnergiesCostsStmt: %w", cerr)
		}
	}
	if q.listEquipmentCatalogueStmt != nil {
		if cerr := q.listEquipmentCatalogueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEquipmentCatalogueStmt: %w", cerr)
		}
	}
	if q.listEquipmentDesignationsStmt != nil {
		if cerr := q.listEquipmentDesignationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEquipmentDesignationsStmt: %w", cerr)
		}
	}
	if q.listEquipmentInstallersStmt != nil {
		if cerr := q.listEquipmentInstallersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEquipmentInstallersStmt: %w", cerr)
		}
	}
	if q.listEquipmentProductsStmt != nil {
		if cerr := q.listEquipmentProductsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEquipmentProductsStmt: %w", cerr)
		}
	}
	if q.listEquipmentServicesStmt != nil {
		if cerr := q.listEquipmentServicesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEquipmentServicesStmt: %w", cerr)
		}
	}
	if q.listGeoStmt != nil {
		if cerr := q.listGeoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listGeoStmt: %w", cerr)
		}
	}
	if q.listGroupPrivilegesLnkStmt != nil {
		if cerr := q.listGroupPrivilegesLnkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listGroupPrivilegesLnkStmt: %w", cerr)
		}
	}
	if q.listGroupsStmt != nil {
		if cerr := q.listGroupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listGroupsStmt: %w", cerr)
		}
	}
	if q.listGroupsByUserStmt != nil {
		if cerr := q.listGroupsByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listGroupsByUserStmt: %w", cerr)
		}
	}
	if q.listGroupsPrivilegesStmt != nil {
		if cerr := q.listGroupsPrivilegesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listGroupsPrivilegesStmt: %w", cerr)
		}
	}
	if q.listGroupsUsersLnkStmt != nil {
		if cerr := q.listGroupsUsersLnkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listGroupsUsersLnkStmt: %w", cerr)
		}
	}
	if q.listLogsStmt != nil {
		if cerr := q.listLogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listLogsStmt: %w", cerr)
		}
	}
	if q.listSalesCommissionsStmt != nil {
		if cerr := q.listSalesCommissionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listSalesCommissionsStmt: %w", cerr)
		}
	}
	if q.listSalesCommissionsDiscountsStmt != nil {
		if cerr := q.listSalesCommissionsDiscountsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listSalesCommissionsDiscountsStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.updateCategoryStmt != nil {
		if cerr := q.updateCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCategoryStmt: %w", cerr)
		}
	}
	if q.updateClientStmt != nil {
		if cerr := q.updateClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateClientStmt: %w", cerr)
		}
	}
	if q.updateClientAssStmt != nil {
		if cerr := q.updateClientAssStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateClientAssStmt: %w", cerr)
		}
	}
	if q.updateClientHomeStmt != nil {
		if cerr := q.updateClientHomeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateClientHomeStmt: %w", cerr)
		}
	}
	if q.updateClientHomeBillStmt != nil {
		if cerr := q.updateClientHomeBillStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateClientHomeBillStmt: %w", cerr)
		}
	}
	if q.updateClientHomeEquipmentStmt != nil {
		if cerr := q.updateClientHomeEquipmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateClientHomeEquipmentStmt: %w", cerr)
		}
	}
	if q.updateClientInstallationStmt != nil {
		if cerr := q.updateClientInstallationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateClientInstallationStmt: %w", cerr)
		}
	}
	if q.updateClientInstallationFileStmt != nil {
		if cerr := q.updateClientInstallationFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateClientInstallationFileStmt: %w", cerr)
		}
	}
	if q.updateClientInstallationPaymentStmt != nil {
		if cerr := q.updateClientInstallationPaymentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateClientInstallationPaymentStmt: %w", cerr)
		}
	}
	if q.updateClientInstallationProductStmt != nil {
		if cerr := q.updateClientInstallationProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateClientInstallationProductStmt: %w", cerr)
		}
	}
	if q.updateClientLoanStmt != nil {
		if cerr := q.updateClientLoanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateClientLoanStmt: %w", cerr)
		}
	}
	if q.updateCompanyStmt != nil {
		if cerr := q.updateCompanyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCompanyStmt: %w", cerr)
		}
	}
	if q.updateEnergiesCostStmt != nil {
		if cerr := q.updateEnergiesCostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEnergiesCostStmt: %w", cerr)
		}
	}
	if q.updateEquipmentCatalogueStmt != nil {
		if cerr := q.updateEquipmentCatalogueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEquipmentCatalogueStmt: %w", cerr)
		}
	}
	if q.updateEquipmentDesignationStmt != nil {
		if cerr := q.updateEquipmentDesignationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEquipmentDesignationStmt: %w", cerr)
		}
	}
	if q.updateEquipmentInstallerStmt != nil {
		if cerr := q.updateEquipmentInstallerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEquipmentInstallerStmt: %w", cerr)
		}
	}
	if q.updateEquipmentProductStmt != nil {
		if cerr := q.updateEquipmentProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEquipmentProductStmt: %w", cerr)
		}
	}
	if q.updateEquipmentServiceStmt != nil {
		if cerr := q.updateEquipmentServiceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEquipmentServiceStmt: %w", cerr)
		}
	}
	if q.updateGeoStmt != nil {
		if cerr := q.updateGeoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGeoStmt: %w", cerr)
		}
	}
	if q.updateGroupStmt != nil {
		if cerr := q.updateGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGroupStmt: %w", cerr)
		}
	}
	if q.updateGroupPrivilegeStmt != nil {
		if cerr := q.updateGroupPrivilegeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGroupPrivilegeStmt: %w", cerr)
		}
	}
	if q.updateGroupPrivilegeLnkStmt != nil {
		if cerr := q.updateGroupPrivilegeLnkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGroupPrivilegeLnkStmt: %w", cerr)
		}
	}
	if q.updateGroupUserLnkStmt != nil {
		if cerr := q.updateGroupUserLnkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGroupUserLnkStmt: %w", cerr)
		}
	}
	if q.updateLogStmt != nil {
		if cerr := q.updateLogStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateLogStmt: %w", cerr)
		}
	}
	if q.updateSalesCommissionStmt != nil {
		if cerr := q.updateSalesCommissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSalesCommissionStmt: %w", cerr)
		}
	}
	if q.updateSalesCommissionDiscountStmt != nil {
		if cerr := q.updateSalesCommissionDiscountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSalesCommissionDiscountStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                   DBTX
	tx                                   *sql.Tx
	createCategoryStmt                   *sql.Stmt
	createClientStmt                     *sql.Stmt
	createClientAssStmt                  *sql.Stmt
	createClientHomeStmt                 *sql.Stmt
	createClientHomeBillStmt             *sql.Stmt
	createClientHomeEquipmentStmt        *sql.Stmt
	createClientInstallationStmt         *sql.Stmt
	createClientInstallationFileStmt     *sql.Stmt
	createClientInstallationPaymentStmt  *sql.Stmt
	createClientInstallationProductStmt  *sql.Stmt
	createClientLoanStmt                 *sql.Stmt
	createCompanyStmt                    *sql.Stmt
	createEnergiesCostStmt               *sql.Stmt
	createEquipmentCatalogueStmt         *sql.Stmt
	createEquipmentDesignationsStmt      *sql.Stmt
	createEquipmentInstallerStmt         *sql.Stmt
	createEquipmentProductStmt           *sql.Stmt
	createEquipmentServicesStmt          *sql.Stmt
	createGeoStmt                        *sql.Stmt
	createGroupStmt                      *sql.Stmt
	createGroupPrivilegeStmt             *sql.Stmt
	createGroupPrivilegeLnkStmt          *sql.Stmt
	createGroupUserLnkStmt               *sql.Stmt
	createGroupUserLnkByGroupNameStmt    *sql.Stmt
	createLogStmt                        *sql.Stmt
	createSalesCommissionStmt            *sql.Stmt
	createSalesCommissionDiscountStmt    *sql.Stmt
	createUserStmt                       *sql.Stmt
	deleteCategoryStmt                   *sql.Stmt
	deleteClientStmt                     *sql.Stmt
	deleteClientAssStmt                  *sql.Stmt
	deleteClientHomeStmt                 *sql.Stmt
	deleteClientHomeBillStmt             *sql.Stmt
	deleteClientHomeEquipmentStmt        *sql.Stmt
	deleteClientInstallationStmt         *sql.Stmt
	deleteClientInstallationFileStmt     *sql.Stmt
	deleteClientInstallationPaymentStmt  *sql.Stmt
	deleteClientInstallationProductStmt  *sql.Stmt
	deleteClientLoanStmt                 *sql.Stmt
	deleteCompanyStmt                    *sql.Stmt
	deleteEnergiesCostStmt               *sql.Stmt
	deleteEquipmentCatalogueStmt         *sql.Stmt
	deleteEquipmentDesignationStmt       *sql.Stmt
	deleteEquipmentInstallerStmt         *sql.Stmt
	deleteEquipmentProductStmt           *sql.Stmt
	deleteEquipmentServiceStmt           *sql.Stmt
	deleteGeoStmt                        *sql.Stmt
	deleteGroupStmt                      *sql.Stmt
	deleteGroupPrivilegeStmt             *sql.Stmt
	deleteGroupPrivilegeLnkStmt          *sql.Stmt
	deleteGroupUserLnkStmt               *sql.Stmt
	deleteLogStmt                        *sql.Stmt
	deleteSalesCommissionStmt            *sql.Stmt
	deleteSalesCommissionDiscountStmt    *sql.Stmt
	deleteUserStmt                       *sql.Stmt
	getCategoryStmt                      *sql.Stmt
	getClientStmt                        *sql.Stmt
	getClientAssStmt                     *sql.Stmt
	getClientHomeEquipmentParamsStmt     *sql.Stmt
	getClientHomeParamsStmt              *sql.Stmt
	getClientHomeParamsBillStmt          *sql.Stmt
	getClientInstallationStmt            *sql.Stmt
	getClientInstallationFileStmt        *sql.Stmt
	getClientInstallationPaymentStmt     *sql.Stmt
	getClientInstallationProductStmt     *sql.Stmt
	getClientLoanStmt                    *sql.Stmt
	getCompanyStmt                       *sql.Stmt
	getEnergiesCostStmt                  *sql.Stmt
	getEquipmentCatalogueStmt            *sql.Stmt
	getEquipmentDesignationStmt          *sql.Stmt
	getEquipmentInstallerStmt            *sql.Stmt
	getEquipmentProductStmt              *sql.Stmt
	getEquipmentServiceStmt              *sql.Stmt
	getGeoStmt                           *sql.Stmt
	getGroupStmt                         *sql.Stmt
	getGroupByNameStmt                   *sql.Stmt
	getGroupPrivilegeStmt                *sql.Stmt
	getGroupPrivilegeLnkStmt             *sql.Stmt
	getGroupPrivilegesByUserIdStmt       *sql.Stmt
	getGroupUserLnkStmt                  *sql.Stmt
	getLogStmt                           *sql.Stmt
	getSalesCommissionStmt               *sql.Stmt
	getSalesCommissionDiscountStmt       *sql.Stmt
	getUserStmt                          *sql.Stmt
	getUserByEmailStmt                   *sql.Stmt
	listCategoriesStmt                   *sql.Stmt
	listClientInstallationProductsStmt   *sql.Stmt
	listClientsStmt                      *sql.Stmt
	listClientsAssStmt                   *sql.Stmt
	listClientsByUserStmt                *sql.Stmt
	listClientsHomesStmt                 *sql.Stmt
	listClientsHomesBillsStmt            *sql.Stmt
	listClientsHomesEquipmentsStmt       *sql.Stmt
	listClientsIdByUserStmt              *sql.Stmt
	listClientsInstallationStmt          *sql.Stmt
	listClientsInstallationFilesStmt     *sql.Stmt
	listClientsInstallationsPaymentsStmt *sql.Stmt
	listClientsLoansStmt                 *sql.Stmt
	listCompaniesStmt                    *sql.Stmt
	listEnergiesCostsStmt                *sql.Stmt
	listEquipmentCatalogueStmt           *sql.Stmt
	listEquipmentDesignationsStmt        *sql.Stmt
	listEquipmentInstallersStmt          *sql.Stmt
	listEquipmentProductsStmt            *sql.Stmt
	listEquipmentServicesStmt            *sql.Stmt
	listGeoStmt                          *sql.Stmt
	listGroupPrivilegesLnkStmt           *sql.Stmt
	listGroupsStmt                       *sql.Stmt
	listGroupsByUserStmt                 *sql.Stmt
	listGroupsPrivilegesStmt             *sql.Stmt
	listGroupsUsersLnkStmt               *sql.Stmt
	listLogsStmt                         *sql.Stmt
	listSalesCommissionsStmt             *sql.Stmt
	listSalesCommissionsDiscountsStmt    *sql.Stmt
	listUsersStmt                        *sql.Stmt
	updateCategoryStmt                   *sql.Stmt
	updateClientStmt                     *sql.Stmt
	updateClientAssStmt                  *sql.Stmt
	updateClientHomeStmt                 *sql.Stmt
	updateClientHomeBillStmt             *sql.Stmt
	updateClientHomeEquipmentStmt        *sql.Stmt
	updateClientInstallationStmt         *sql.Stmt
	updateClientInstallationFileStmt     *sql.Stmt
	updateClientInstallationPaymentStmt  *sql.Stmt
	updateClientInstallationProductStmt  *sql.Stmt
	updateClientLoanStmt                 *sql.Stmt
	updateCompanyStmt                    *sql.Stmt
	updateEnergiesCostStmt               *sql.Stmt
	updateEquipmentCatalogueStmt         *sql.Stmt
	updateEquipmentDesignationStmt       *sql.Stmt
	updateEquipmentInstallerStmt         *sql.Stmt
	updateEquipmentProductStmt           *sql.Stmt
	updateEquipmentServiceStmt           *sql.Stmt
	updateGeoStmt                        *sql.Stmt
	updateGroupStmt                      *sql.Stmt
	updateGroupPrivilegeStmt             *sql.Stmt
	updateGroupPrivilegeLnkStmt          *sql.Stmt
	updateGroupUserLnkStmt               *sql.Stmt
	updateLogStmt                        *sql.Stmt
	updateSalesCommissionStmt            *sql.Stmt
	updateSalesCommissionDiscountStmt    *sql.Stmt
	updateUserStmt                       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                   tx,
		tx:                                   tx,
		createCategoryStmt:                   q.createCategoryStmt,
		createClientStmt:                     q.createClientStmt,
		createClientAssStmt:                  q.createClientAssStmt,
		createClientHomeStmt:                 q.createClientHomeStmt,
		createClientHomeBillStmt:             q.createClientHomeBillStmt,
		createClientHomeEquipmentStmt:        q.createClientHomeEquipmentStmt,
		createClientInstallationStmt:         q.createClientInstallationStmt,
		createClientInstallationFileStmt:     q.createClientInstallationFileStmt,
		createClientInstallationPaymentStmt:  q.createClientInstallationPaymentStmt,
		createClientInstallationProductStmt:  q.createClientInstallationProductStmt,
		createClientLoanStmt:                 q.createClientLoanStmt,
		createCompanyStmt:                    q.createCompanyStmt,
		createEnergiesCostStmt:               q.createEnergiesCostStmt,
		createEquipmentCatalogueStmt:         q.createEquipmentCatalogueStmt,
		createEquipmentDesignationsStmt:      q.createEquipmentDesignationsStmt,
		createEquipmentInstallerStmt:         q.createEquipmentInstallerStmt,
		createEquipmentProductStmt:           q.createEquipmentProductStmt,
		createEquipmentServicesStmt:          q.createEquipmentServicesStmt,
		createGeoStmt:                        q.createGeoStmt,
		createGroupStmt:                      q.createGroupStmt,
		createGroupPrivilegeStmt:             q.createGroupPrivilegeStmt,
		createGroupPrivilegeLnkStmt:          q.createGroupPrivilegeLnkStmt,
		createGroupUserLnkStmt:               q.createGroupUserLnkStmt,
		createGroupUserLnkByGroupNameStmt:    q.createGroupUserLnkByGroupNameStmt,
		createLogStmt:                        q.createLogStmt,
		createSalesCommissionStmt:            q.createSalesCommissionStmt,
		createSalesCommissionDiscountStmt:    q.createSalesCommissionDiscountStmt,
		createUserStmt:                       q.createUserStmt,
		deleteCategoryStmt:                   q.deleteCategoryStmt,
		deleteClientStmt:                     q.deleteClientStmt,
		deleteClientAssStmt:                  q.deleteClientAssStmt,
		deleteClientHomeStmt:                 q.deleteClientHomeStmt,
		deleteClientHomeBillStmt:             q.deleteClientHomeBillStmt,
		deleteClientHomeEquipmentStmt:        q.deleteClientHomeEquipmentStmt,
		deleteClientInstallationStmt:         q.deleteClientInstallationStmt,
		deleteClientInstallationFileStmt:     q.deleteClientInstallationFileStmt,
		deleteClientInstallationPaymentStmt:  q.deleteClientInstallationPaymentStmt,
		deleteClientInstallationProductStmt:  q.deleteClientInstallationProductStmt,
		deleteClientLoanStmt:                 q.deleteClientLoanStmt,
		deleteCompanyStmt:                    q.deleteCompanyStmt,
		deleteEnergiesCostStmt:               q.deleteEnergiesCostStmt,
		deleteEquipmentCatalogueStmt:         q.deleteEquipmentCatalogueStmt,
		deleteEquipmentDesignationStmt:       q.deleteEquipmentDesignationStmt,
		deleteEquipmentInstallerStmt:         q.deleteEquipmentInstallerStmt,
		deleteEquipmentProductStmt:           q.deleteEquipmentProductStmt,
		deleteEquipmentServiceStmt:           q.deleteEquipmentServiceStmt,
		deleteGeoStmt:                        q.deleteGeoStmt,
		deleteGroupStmt:                      q.deleteGroupStmt,
		deleteGroupPrivilegeStmt:             q.deleteGroupPrivilegeStmt,
		deleteGroupPrivilegeLnkStmt:          q.deleteGroupPrivilegeLnkStmt,
		deleteGroupUserLnkStmt:               q.deleteGroupUserLnkStmt,
		deleteLogStmt:                        q.deleteLogStmt,
		deleteSalesCommissionStmt:            q.deleteSalesCommissionStmt,
		deleteSalesCommissionDiscountStmt:    q.deleteSalesCommissionDiscountStmt,
		deleteUserStmt:                       q.deleteUserStmt,
		getCategoryStmt:                      q.getCategoryStmt,
		getClientStmt:                        q.getClientStmt,
		getClientAssStmt:                     q.getClientAssStmt,
		getClientHomeEquipmentParamsStmt:     q.getClientHomeEquipmentParamsStmt,
		getClientHomeParamsStmt:              q.getClientHomeParamsStmt,
		getClientHomeParamsBillStmt:          q.getClientHomeParamsBillStmt,
		getClientInstallationStmt:            q.getClientInstallationStmt,
		getClientInstallationFileStmt:        q.getClientInstallationFileStmt,
		getClientInstallationPaymentStmt:     q.getClientInstallationPaymentStmt,
		getClientInstallationProductStmt:     q.getClientInstallationProductStmt,
		getClientLoanStmt:                    q.getClientLoanStmt,
		getCompanyStmt:                       q.getCompanyStmt,
		getEnergiesCostStmt:                  q.getEnergiesCostStmt,
		getEquipmentCatalogueStmt:            q.getEquipmentCatalogueStmt,
		getEquipmentDesignationStmt:          q.getEquipmentDesignationStmt,
		getEquipmentInstallerStmt:            q.getEquipmentInstallerStmt,
		getEquipmentProductStmt:              q.getEquipmentProductStmt,
		getEquipmentServiceStmt:              q.getEquipmentServiceStmt,
		getGeoStmt:                           q.getGeoStmt,
		getGroupStmt:                         q.getGroupStmt,
		getGroupByNameStmt:                   q.getGroupByNameStmt,
		getGroupPrivilegeStmt:                q.getGroupPrivilegeStmt,
		getGroupPrivilegeLnkStmt:             q.getGroupPrivilegeLnkStmt,
		getGroupPrivilegesByUserIdStmt:       q.getGroupPrivilegesByUserIdStmt,
		getGroupUserLnkStmt:                  q.getGroupUserLnkStmt,
		getLogStmt:                           q.getLogStmt,
		getSalesCommissionStmt:               q.getSalesCommissionStmt,
		getSalesCommissionDiscountStmt:       q.getSalesCommissionDiscountStmt,
		getUserStmt:                          q.getUserStmt,
		getUserByEmailStmt:                   q.getUserByEmailStmt,
		listCategoriesStmt:                   q.listCategoriesStmt,
		listClientInstallationProductsStmt:   q.listClientInstallationProductsStmt,
		listClientsStmt:                      q.listClientsStmt,
		listClientsAssStmt:                   q.listClientsAssStmt,
		listClientsByUserStmt:                q.listClientsByUserStmt,
		listClientsHomesStmt:                 q.listClientsHomesStmt,
		listClientsHomesBillsStmt:            q.listClientsHomesBillsStmt,
		listClientsHomesEquipmentsStmt:       q.listClientsHomesEquipmentsStmt,
		listClientsIdByUserStmt:              q.listClientsIdByUserStmt,
		listClientsInstallationStmt:          q.listClientsInstallationStmt,
		listClientsInstallationFilesStmt:     q.listClientsInstallationFilesStmt,
		listClientsInstallationsPaymentsStmt: q.listClientsInstallationsPaymentsStmt,
		listClientsLoansStmt:                 q.listClientsLoansStmt,
		listCompaniesStmt:                    q.listCompaniesStmt,
		listEnergiesCostsStmt:                q.listEnergiesCostsStmt,
		listEquipmentCatalogueStmt:           q.listEquipmentCatalogueStmt,
		listEquipmentDesignationsStmt:        q.listEquipmentDesignationsStmt,
		listEquipmentInstallersStmt:          q.listEquipmentInstallersStmt,
		listEquipmentProductsStmt:            q.listEquipmentProductsStmt,
		listEquipmentServicesStmt:            q.listEquipmentServicesStmt,
		listGeoStmt:                          q.listGeoStmt,
		listGroupPrivilegesLnkStmt:           q.listGroupPrivilegesLnkStmt,
		listGroupsStmt:                       q.listGroupsStmt,
		listGroupsByUserStmt:                 q.listGroupsByUserStmt,
		listGroupsPrivilegesStmt:             q.listGroupsPrivilegesStmt,
		listGroupsUsersLnkStmt:               q.listGroupsUsersLnkStmt,
		listLogsStmt:                         q.listLogsStmt,
		listSalesCommissionsStmt:             q.listSalesCommissionsStmt,
		listSalesCommissionsDiscountsStmt:    q.listSalesCommissionsDiscountsStmt,
		listUsersStmt:                        q.listUsersStmt,
		updateCategoryStmt:                   q.updateCategoryStmt,
		updateClientStmt:                     q.updateClientStmt,
		updateClientAssStmt:                  q.updateClientAssStmt,
		updateClientHomeStmt:                 q.updateClientHomeStmt,
		updateClientHomeBillStmt:             q.updateClientHomeBillStmt,
		updateClientHomeEquipmentStmt:        q.updateClientHomeEquipmentStmt,
		updateClientInstallationStmt:         q.updateClientInstallationStmt,
		updateClientInstallationFileStmt:     q.updateClientInstallationFileStmt,
		updateClientInstallationPaymentStmt:  q.updateClientInstallationPaymentStmt,
		updateClientInstallationProductStmt:  q.updateClientInstallationProductStmt,
		updateClientLoanStmt:                 q.updateClientLoanStmt,
		updateCompanyStmt:                    q.updateCompanyStmt,
		updateEnergiesCostStmt:               q.updateEnergiesCostStmt,
		updateEquipmentCatalogueStmt:         q.updateEquipmentCatalogueStmt,
		updateEquipmentDesignationStmt:       q.updateEquipmentDesignationStmt,
		updateEquipmentInstallerStmt:         q.updateEquipmentInstallerStmt,
		updateEquipmentProductStmt:           q.updateEquipmentProductStmt,
		updateEquipmentServiceStmt:           q.updateEquipmentServiceStmt,
		updateGeoStmt:                        q.updateGeoStmt,
		updateGroupStmt:                      q.updateGroupStmt,
		updateGroupPrivilegeStmt:             q.updateGroupPrivilegeStmt,
		updateGroupPrivilegeLnkStmt:          q.updateGroupPrivilegeLnkStmt,
		updateGroupUserLnkStmt:               q.updateGroupUserLnkStmt,
		updateLogStmt:                        q.updateLogStmt,
		updateSalesCommissionStmt:            q.updateSalesCommissionStmt,
		updateSalesCommissionDiscountStmt:    q.updateSalesCommissionDiscountStmt,
		updateUserStmt:                       q.updateUserStmt,
	}
}
